#! /bin/bash

case $1 in
    desc )
	echo "dumb question engine"
	return
	;;
    longdesc )
	echo "This question engine uses dumb terminal for user interaction."
	return
	;;
esac

# pwiz_question_init
function pwiz_engine_question_dumb_init {
    :
}

# pwiz_question_quit
function pwiz_engine_question_dumb_quit {
    :
}

# pwiz_question_yesno desc longdesc [ tags ... ]
# FIXME: Probably obsolete - replaced by special case of ask_string
function pwiz_engine_question_dumb_yesno {
    local desc longdesc guesses_count=0 true_p=0 false_p=0 REPLY
    desc="$1"
    longdesc="$2"
    shift 2
    while test $guesses_count -lt ${#pwiz_guesses[*]} ; do
	eval "${pwiz_guesses[$guesses_count]}_p=${pwiz_trusts[$guesses_count]}"
	let guesses_count++
    done
    while : ; do
	echo
	echo "$desc"
	if test "$pwiz_guess_best_value" = true ; then
	    echo "y) yes ($true_p%, default)"
	else
	    echo "y) yes ($true_p%)"
	fi
	if test "$pwiz_guess_best_value" = false ; then
	    echo "n) no ($false_p%, default)"
	else
	    echo "n) no ($false_p%)"
	fi
	echo "h) help"
	read
	case "$REPLY" in
	    "" )
		if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
		    echo "This question has no default."
		    continue
		fi
		pwiz_answer="$pwiz_guess_best_value";
		break
		;;
	    y )
		pwiz_answer=true;
		break
		;;
	    n )
		pwiz_answer=false;
		break
		;;
	    h )
		echo "$longdesc"
		;;
	esac
    done
}

# pwiz_question_string desc longdesc [ tags ... ]
function pwiz_engine_question_dumb_string {
    local desc longdesc guesses_count selection default REPLY

    desc="$1"
    longdesc="$2"
    shift 2
    pwiz_read_tags
    while : ; do
	echo
	echo "$desc"
	guesses_count=0
	for (( guesses_count=0 ; guesses_count < ${#pwiz_guesses[*]} ; guesses_count++ )) ; do
	    if test $guesses_count = "$pwiz_guess_best" ; then
		default=", default"
	    else
		default=
	    fi
	    if test -z "${pwiz_hotkeys[$guesses_count]}" ; then
		selection="$guesses_count"
	    else
		selection="$guesses_count, ${pwiz_hotkeys[$guesses_count]}"
	    fi
	    if test -z "${pwiz_strings[$guesses_count]}" ; then
		echo "$selection) \"${pwiz_guesses[$guesses_count]}\" (${pwiz_trusts[$guesses_count]}%$default)"
	    else
		echo "$selection) ${pwiz_strings[$guesses_count]} (${pwiz_trusts[$guesses_count]}%$default)"
	    fi
	done
	if $pwiz_tag_allow_new ; then
	    echo "m) enter manually"
	fi
	echo "h) help"
	read
	case "$REPLY" in
	    "" )
		if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
		    echo "This question has no default."
		    continue
		fi
		pwiz_answer="$pwiz_guess_best_value";
		break
		;;
# FIXME: sometimes m and h can have other meaning
# probably entirely rewrite to have h and m as pluggable answers
	    m )
		if $pwiz_tag_allow_new ; then
		    if test -z "$pwiz_tag_callback" ; then
			echo -n "Your value: "
			read
			pwiz_answer="$REPLY";
		    else
			$pwiz_tag_callback "$@"
		    fi
		    break
		else
		    echo "Invalid choice!"
		fi
		;;
	    h )
		echo "$longdesc"
		;;
	    # FIXME: Limit is 1000 guesses.
	    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		if test $REPLY -ge ${#pwiz_guesses[*]} ; then
		    echo "Invalid choice!"
		    continue
		fi
		pwiz_answer="${pwiz_guesses[$REPLY]}"
		break
		;;
	    [a-z] )
		if test -z "${pwiz_hotarray[64#$REPLY]}" ; then
		    echo "No such hotkey!"
		    continue
		else
		    pwiz_answer="${pwiz_guesses[${pwiz_hotarray[64#$REPLY]}]}"
		    break
		fi
		;;
	    * )
		echo "Invalid choice!"
		;;
	esac
    done
}

# pwiz_question_radio desc longdesc [ tags ... ]
function pwiz_engine_question_dumb_radio {
    local desc longdesc guesses_count default REPLY
    desc="$1"
    longdesc="$2"
    shift 2
    while : ; do
	echo
	echo "$desc"
	guesses_count=0
	while test $guesses_count -lt ${#pwiz_guesses[*]} ; do
	    if test $guesses_count = "$pwiz_guess_best" ; then
		default=", default"
	    else
		default=
	    fi
	    if test -z "${pwiz_strings[$guesses_count]}" ; then
		echo "$guesses_count) \"${pwiz_guesses[$guesses_count]}\" (${pwiz_trusts[$guesses_count]}%$default)"
	    else
		echo "$guesses_count) ${pwiz_strings[$guesses_count]} (${pwiz_trusts[$guesses_count]}%$default)"
	    fi
	    let guesses_count++
	done
	echo "h) help"
	read
	case "$REPLY" in
	    "" )
		if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
		    echo "This question has no default."
		    continue
		fi
		pwiz_answer="$pwiz_guess_best_value";
		break
		;;
	    h )
		echo "$longdesc"
		;;
	    # FIXME: Limit is 1000 guesses.
	    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		if test $REPLY -ge ${#pwiz_guesses[*]} ; then
		    echo "Invalid choice!"
		    continue
		fi
		pwiz_answer="${pwiz_guesses[$REPLY]}"
		break
		;;
	    * )
		echo "Invalid choice!"
		;;
	esac
    done
}

# FIXME: implement pwiz_engine_question_dumb_selection

function pwiz_engine_question_dumb_list {
    local desc longdesc list_off list_item guesses_count count_off menu_mode="" default REPLY pwiz_answer_save
    local -a items

    desc="$1"
    longdesc="$2"
    shift 2
    pwiz_read_tags
    if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
	pwiz_answer=" "
    else
	pwiz_answer=" $pwiz_guess_best_value "
    fi
    while : ; do
	echo
	echo "$desc"
	echo "Active items (in order):"
	guesses_count=0
	list_off="$pwiz_list_all"
	for list_item in $pwiz_answer ; do
# FIXME: Text representation of items
	    echo "$guesses_count) $list_item"
	    items[$guesses_count]="$list_item"
	    list_off=${list_off/ $list_item / }
	    let guesses_count++
	done
	count_off=$guesses_count
	echo "Inactive items:"
	for list_item in $list_off ; do
# FIXME: Text representation of items
	    echo "$guesses_count) $list_item"
	    items[$guesses_count]="$list_item"
	    let guesses_count++
	done
	if test "$menu_mode" = "" ; then
	    echo "[number]) action in this position (item operations, new)"
	    echo "n) new item at the end"
	    echo "x) exit list editor (default)"
	    echo "h) help"
	    read
	    case "$REPLY" in
		n )
		    # FIXME: Identical code is duplicated
		    # FIXME: better desc and londesc
		    # FIXME: one word and unique
		    echo -n  "Enter ID for this new item: "
		    read
		    pwiz_answer_save="$pwiz_answer$REPLY "
		    eval pwiz_ask_$pwiz_tag_item_type '"$desc Enter value for new item." "$longdesc
Formal type for this is a list. Now you have a chance to add new item to this list." "$@" q=${pwiz_tag_q}_$REPLY'
		    pwiz_answer="$pwiz_answer_save"
		    menu_mode=""
		    ;;
		x | "" )
		    break
		    ;;
		h ) echo "$longdesc"
		    ;;
	    # FIXME: Limit is 1000 guesses.
		[0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		    if test $REPLY -ge $guesses_count ; then
			echo "Invalid choice!"
			continue
		    fi
		    menu_mode="$REPLY"
		    ;;
		* )
		    echo "Invalid choice!"
		    ;;
	    esac
	else
	    echo "Actions with item $menu_mode:"
	    if test $menu_mode -lt $count_off ; then
		echo "[number]) move to selected position"
		echo "i) inactivate item"
		echo "n) new item in this position"
		echo "x) exit item editor (default)"
		echo "h) help"
		read
		case "$REPLY" in
	    # FIXME: Limit is 1000 guesses.
		    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
			if test $REPLY -gt $count_off ; then
			    echo "Invalid choice!"
			    continue
			fi
			pwiz_answer=" "
			guesses_count=0
			while test $guesses_count -lt $REPLY ; do
			    if test "${items[$guesses_count]}" != "${items[$menu_mode]}" ; then
				pwiz_answer="$pwiz_answer${items[$guesses_count]} "
			    fi
			    let guesses_count++
			done
			pwiz_answer="$pwiz_answer${items[$menu_mode]} "
			while test $guesses_count -lt $count_off ; do
			    if test "${items[$guesses_count]}" != "${items[$menu_mode]}" ; then
				pwiz_answer="$pwiz_answer${items[$guesses_count]} "
			    fi
			    let guesses_count++
			done
			menu_mode=""
			;;
		    i )
			pwiz_answer="${pwiz_answer/ ${items[$menu_mode]} / }"
			menu_mode=""
			;;
		    n )
			# FIXME: better desc and londesc
			# FIXME: one word and unique
			echo -n  "Enter ID for this new item: "
			read
			pwiz_answer_save="$pwiz_answer"
			eval pwiz_ask_$pwiz_tag_item_type '"$desc Enter value for new item." "$longdesc
Formal type for this is a list. Now you have a chance to add new item to this list." "$@" q=${pwiz_tag_q}_$REPLY'
			pwiz_answer="$pwiz_answer_save"
			menu_mode=""
			;;
		    x | "" )
			menu_mode=""
			;;
		    h ) echo "$longdesc"
			;;
		    * )
			echo "Invalid choice!"
			;;
		esac
	    else
		echo "a) activate item"
		echo "x) exit item editor (default)"
		echo "h) help"
		read
		case "$REPLY" in
		    a )
			pwiz_answer="$pwiz_answer${items[$menu_mode]} "
			menu_mode=""
			;;
		    x | "" )
			menu_mode=""
			;;
		    h ) echo "$longdesc"
			;;
		    * )
			echo "Invalid choice!"
			;;
		esac
	    fi
	fi
    done
    pwiz_answer="${pwiz_answer# }"
    pwiz_answer="${pwiz_answer% }"
}
