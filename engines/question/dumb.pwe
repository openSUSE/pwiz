#! /bin/bash

case $1 in
    desc )
	echo "dumb question engine"
	return
	;;
    longdesc )
	echo "This question engine uses dumb terminal for user interaction."
	return
	;;
esac

# pwiz_question_init
function pwiz_engine_question_dumb_init {
# WARNING: This violates naming conventions.
    black="$(tput setf 0)"
    blue="$(tput setf 1)"
    green="$(tput setf 2)"
    cyan="$(tput setf 3)"
    red="$(tput setf 4)"
    magenta="$(tput setf 5)"
    yellow="$(tput setf 6)"
    white="$(tput setf 7)"

    blackbg="$(tput setb 0)"
    bluebg="$(tput setb 1)"
    greenbg="$(tput setb 2)"
    cyanbg="$(tput setb 3)"
    redbg="$(tput setb 4)"
    magentabg="$(tput setb 5)"
    yellowbg="$(tput setb 6)"
    whitebg="$(tput setb 7)"

    defcolors="$(tput init)"

    # Colors configuration.
    pwiz_engine_question_dumb_default_begin="$blue"
    pwiz_engine_question_dumb_default_end="$black"
    pwiz_engine_question_dumb_default_begin="$blue"
    pwiz_engine_question_dumb_desc_begin="$whitebg

$red"
    pwiz_engine_question_dumb_desc_end="$black"
    pwiz_engine_question_dumb_question_end="$defcolors
"
    pwiz_engine_question_dumb_auto_begin="$whitebg

"
    pwiz_engine_question_dumb_auto_end="
$defcolors"
    pwiz_engine_question_dumb_autodesc_begin="$green"
    pwiz_engine_question_dumb_autodesc_end="$black"

}

# pwiz_question_quit
function pwiz_engine_question_dumb_quit {
    :
}

# pwiz_question_yesno desc longdesc #%#[ tags ... ]
# FIXME: Probably obsolete - replaced by special case of ask_string
# pwiz_question_string desc longdesc #%#[ tags ... ]
function pwiz_engine_question_dumb_string {
    local desc longdesc guesses_count selection bdefault edefault default REPLY

    desc="$1"
    longdesc="$2"
    shift 2
#%#    pwiz_read_tags
    while : ; do
	echo "$pwiz_engine_question_dumb_desc_begin$desc$pwiz_engine_question_dumb_desc_end"
	for (( guesses_count=0 ; guesses_count < ${#pwiz_guesses[*]} ; guesses_count++ )) ; do
	    if test $guesses_count = "$pwiz_guess_best" ; then
		bdefault="$pwiz_engine_question_dumb_default_begin"
		edefault="$pwiz_engine_question_dumb_default_end"
		default=", default"
	    else
		bdefault=
		edefault=
		default=
	    fi
	    if test -z "${pwiz_hotkeys[guesses_count]}" ; then
		selection="$guesses_count"
	    else
		selection="$guesses_count, ${pwiz_hotkeys[guesses_count]}"
	    fi
	    if test -z "${pwiz_strings[guesses_count]}" ; then
		echo "$selection) \"$bdefault${pwiz_guesses[guesses_count]}$edefault\" (${pwiz_credits[guesses_count]}c, ${pwiz_p[guesses_count]}%$default)"
	    else
		echo "$selection) $bdefault${pwiz_strings[guesses_count]}$edefault (${pwiz_credits[guesses_count]}c, ${pwiz_p[guesses_count]}%$default)"
	    fi
	done
	if $pwiz_tag_allow_new ; then
	    echo "m) enter manually ($pwiz_p_other%)"
	    echo "e[number]) edit manually (start with answer number)"
	fi
	echo -n "$pwiz_engine_question_dumb_question_end"
	echo "$longdesc" | fmt -w $(tput cols)
	read -p "pwiz${pwiz_tag_q:+@$pwiz_tag_q}> "
	case "$REPLY" in
	    "" )
		if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
		    echo "This question has no default."
		    continue
		fi
		pwiz_answer="$pwiz_guess_best_value";
		pwiz_fallback_answer=true
		break
		;;
# FIXME: sometimes m and h can have other meaning
# probably entirely rewrite to have h and m as pluggable answers
# FIXME: support m[number] to start editing with value
	    m )
		if $pwiz_tag_allow_new ; then
		    if test -z "$pwiz_tag_callback" ; then
			echo -n "Your value: "
			if $pwiz_tag_multiline ; then
# FIXME: document file $PWIZ_TMPDIR/pwiz_answer
			    ${EDITOR:-vi} $PWIZ_TMPDIR/dumb_answer
			    pwiz_answer="$(<$PWIZ_TMPDIR/dumb_answer)"
			    rm $PWIZ_TMPDIR/dumb_answer
			else
			    read
			    pwiz_answer="$REPLY"
			fi
		    else
			$pwiz_tag_callback "$@"
		    fi
		    break
		else
		    echo "Invalid choice!"
		fi
		;;
	    e* )
		if $pwiz_tag_allow_new ; then
		    selection="${REPLY#?}"
		    if ! test -z "$selection" ; then
# FIXME: integer checker, remove initial file, if exists.
			if test "$selection" -ge ${#pwiz_guesses[*]} ; then
			    echo "Invalid guess number!"
			    continue
			fi
			echo -n "${pwiz_guesses[$selection]}" >$PWIZ_TMPDIR/dumb_answer
		    fi
		    ${EDITOR:-vi} $PWIZ_TMPDIR/dumb_answer
		    pwiz_answer="$(<$PWIZ_TMPDIR/dumb_answer)"
		    rm $PWIZ_TMPDIR/dumb_answer
		    break
		else
		    echo "Invalid choice!"
		fi
		;;
	    # FIXME: Limit is 1000 guesses.
	    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		if test $REPLY -ge ${#pwiz_guesses[*]} ; then
		    echo "Invalid choice!"
		    continue
		fi
		pwiz_answer="${pwiz_guesses[$REPLY]}"
		break
		;;
	    [a-z] )
		if test -z "${pwiz_hotarray[64#$REPLY]}" ; then
		    echo "No such hotkey!"
		    continue
		else
		    pwiz_answer="${pwiz_guesses[${pwiz_hotarray[64#$REPLY]}]}"
		    break
		fi
		;;
	    * )
		echo "Invalid choice!"
		;;
	esac
    done
}

# pwiz_question_radio desc longdesc #%#[ tags ... ]
function pwiz_engine_question_dumb_radio {
    local desc longdesc guesses_count bdefault edefault default REPLY
    desc="$1"
    longdesc="$2"
    shift 2
    while : ; do
	echo "$pwiz_engine_question_dumb_desc_begin$desc$pwiz_engine_question_dumb_desc_end"
	for (( guesses_count=0 ; guesses_count < ${#pwiz_guesses[*]} ; guesses_count++ )) ; do
	    if test $guesses_count = "$pwiz_guess_best" ; then
		bdefault="$pwiz_engine_question_dumb_default_begin"
		edefault="$pwiz_engine_question_dumb_default_end"
		default=", default"
	    else
		bdefault=
		edefault=
		default=
	    fi
	    if test -z "${pwiz_strings[guesses_count]}" ; then
		echo "$guesses_count) \"$bdefault${pwiz_guesses[guesses_count]}$edefault\" (${pwiz_credits[guesses_count]}c, ${pwiz_p[guesses_count]}%$default)"
	    else
		echo "$guesses_count) $bdefault${pwiz_strings[guesses_count]}$edefault (${pwiz_credits[guesses_count]}c, ${pwiz_p[guesses_count]}%$default)"
	    fi
	done
	echo -n "$pwiz_engine_question_dumb_question_end"
	echo "$longdesc" | fmt -w $(tput cols)
	read -p "pwiz${pwiz_tag_q:+@$pwiz_tag_q}> "
	case "$REPLY" in
	    "" )
		if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
		    echo "This question has no default."
		    continue
		fi
		pwiz_answer="$pwiz_guess_best_value";
		break
		;;
	    # FIXME: Limit is 1000 guesses.
	    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		if test $REPLY -ge ${#pwiz_guesses[*]} ; then
		    echo "Invalid choice!"
		    continue
		fi
		pwiz_answer="${pwiz_guesses[$REPLY]}"
		break
		;;
	    * )
		echo "Invalid choice!"
		;;
	esac
    done
}

# FIXME: implement pwiz_engine_question_dumb_selection

function pwiz_engine_question_dumb_list {
    local desc longdesc list_off list_item items_count count_off menu_mode="" bdefault edefault default REPLY pwiz_answer_save string
    local -a items

    pwiz_fallback_answer=true

    desc="$1"
    longdesc="$2"
    shift 2
#%#    pwiz_read_tags
    if test "$pwiz_guess_best_value" = @@PWIZ_UNDEFINED@@ ; then
	pwiz_answer=" "
    else
	pwiz_answer=" $pwiz_guess_best_value "
    fi
    for (( items_count=0 ; items_count < ${#pwiz_list_all[@]} ; items_count++ )) ; do
	if ! test -z "${pwiz_list_strings[items_count]}" ; then
	    eval "local list__${pwiz_list_all[items_count]}=\"\${pwiz_list_strings[items_count]}\""
	fi
    done
    while : ; do
	echo "$pwiz_engine_question_dumb_desc_begin$desc$pwiz_engine_question_dumb_desc_end"
	echo "${yellow}Active items (in order):$black"
	items_count=0
	list_off=" ${pwiz_list_all[*]} "
# FIXME: Hotkeys.
	for list_item in $pwiz_answer ; do
	    eval string\=\"\$list__$list_item\"
	    if test -z "$string" ; then
		echo "$items_count) \"$list_item\""
	    else
		echo "$items_count) $string"
	    fi
	    items[items_count]="$list_item"
# Maybe FIXME: Implement this on arrays:
	    list_off=${list_off/ $list_item / }
	    let items_count++
	done
	count_off=$items_count
	echo "${yellow}Inactive items:$black"
	for list_item in $list_off ; do
	    eval string\=\"\$list__$list_item\"
	    if test -z "$string" ; then
		echo "$items_count) \"$list_item\""
	    else
		echo "$items_count) $string"
	    fi
	    items[items_count]="$list_item"
	    let items_count++
	done
	echo -n "$pwiz_engine_question_dumb_question_end"
	if test "$menu_mode" = "" ; then
	    echo "[number]) action in this position (item operations, new)"
	    if $pwiz_tag_allow_new ; then
		echo "n) new item at the end"
	    fi
	    echo "x) exit list editor (default)"
	    echo -n "$pwiz_engine_question_dumb_question_end"
echo "$longdesc" | fmt -w $(tput cols)
	    read -p "pwiz${pwiz_tag_q:+@$pwiz_tag_q}> "
	    case "$REPLY" in
		n )
		    if $pwiz_tag_allow_new ; then
		    # FIXME: Identical code is duplicated
		    # FIXME: better desc and londesc
		    # FIXME: one word and unique
			echo -n  "Enter ID for this new item: "
			read
			pwiz_answer_save="$pwiz_answer$REPLY "
			eval pwiz_ask_$pwiz_tag_item_type '"$pwiz_engine_question_dumb_desc_begin$desc$pwiz_engine_question_dumb_desc_end Enter value for new item." "$longdesc
Formal type for this is a list. Now you have a chance to add new item to this list." "$@" q=${pwiz_tag_q}_$REPLY'
			pwiz_answer="$pwiz_answer_save"
			menu_mode=""
			pwiz_fallback_answer=false
		    else
			echo "Invalid choice!"
		    fi

		    ;;
		x | "" )
		    break
		    ;;
	    # FIXME: Limit is 1000 guesses.
		[0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
		    if test $REPLY -ge $items_count ; then
			echo "Invalid choice!"
			continue
		    fi
		    menu_mode="$REPLY"
		    pwiz_fallback_answer=false
		    ;;
		* )
		    echo "Invalid choice!"
		    ;;
	    esac
	else
	    echo "Actions with item $menu_mode:"
	    if test $menu_mode -lt $count_off ; then
		echo "[number]) move to selected position"
		echo "i) inactivate item"
		echo "n) new item in this position"
		echo "x) exit item editor (default)"
		read -p "pwiz@$menu_mode${pwiz_tag_q:+@$pwiz_tag_q}> "
		case "$REPLY" in
	    # FIXME: Limit is 1000 guesses.
		    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] )
			if test $REPLY -gt $count_off ; then
			    echo "Invalid choice!"
			    continue
			fi
			pwiz_answer=" "
			items_count=0
			while test $items_count -lt $REPLY ; do
			    if test "${items[items_count]}" != "${items[$menu_mode]}" ; then
				pwiz_answer="$pwiz_answer${items[items_count]} "
			    fi
			    let items_count++
			done
			pwiz_answer="$pwiz_answer${items[$menu_mode]} "
			while test $items_count -lt $count_off ; do
			    if test "${items[items_count]}" != "${items[$menu_mode]}" ; then
				pwiz_answer="$pwiz_answer${items[items_count]} "
			    fi
			    let items_count++
			done
			menu_mode=""
			;;
		    i )
			pwiz_answer="${pwiz_answer/ ${items[$menu_mode]} / }"
			menu_mode=""
			;;
		    n )
			# FIXME: better desc and londesc
			# FIXME: one word and unique
			echo -n  "Enter ID for this new item: "
			read
			pwiz_answer_save="$pwiz_answer"
# FIXME: This probably should disappear and only callback should exist.
			eval pwiz_ask_$pwiz_tag_item_type '"$$pwiz_engine_question_dumb_desc_begin$desc$pwiz_engine_question_dumb_desc_end Enter value for new item." "$longdesc
Formal type for this is a list. Now you have a chance to add new item to this list." "$@" q=${pwiz_tag_q}_$REPLY'
			pwiz_answer="$pwiz_answer_save"
			menu_mode=""
			;;
		    x | "" )
			menu_mode=""
			;;
		    * )
			echo "Invalid choice!"
			;;
		esac
	    else
		echo "a) activate item"
		echo "x) exit item editor (default)"
		read -p "pwiz@$menu_mode${pwiz_tag_q:+@$pwiz_tag_q}> "
		case "$REPLY" in
		    a )
			pwiz_answer="$pwiz_answer${items[$menu_mode]} "
			menu_mode=""
			;;
		    x | "" )
			menu_mode=""
			;;
		    * )
			echo "Invalid choice!"
			;;
		esac
	    fi
	fi
    done
    pwiz_answer="${pwiz_answer# }"
    pwiz_answer="${pwiz_answer% }"
}
pwiz_register_tag_default pwiz_tag_multiline=false

function pwiz_engine_question_dumb_auto_answer {
    local string
    if test -z "${pwiz_strings[$3]}" ; then
	string="${pwiz_guesses[guesses_count]}"
    else
	string="${pwiz_strings[guesses_count]}"
    fi
    echo "$pwiz_engine_question_dumb_auto_begin*** Question was: $pwiz_engine_question_dumb_autodesc_begin$1$pwiz_engine_question_dumb_autodesc_end"
    echo "*** PWIZ answered: $pwiz_engine_question_dumb_autodesc_begin$string$pwiz_engine_question_dumb_autodesc_end (${pwiz_credits[$3]}c)$pwiz_engine_question_dumb_auto_end"
}
