#! /bin/bash

case $1 in
    desc )
	echo "GNOME PWIZ framework"
	return
	;;
    longdesc )
	echo "This module adds intelligent guesses for GNOME related packages. It means, for example: searching for source in GNOME FTP, working with gnome paths, proper installing of GNOME packages."
	return
	;;
    init )
	pwiz_module_needs check_unpacked prefix ldconfig package
	pwiz_phase_new gnome_gconf_install after ldconfig
	prefix_provider
	package_search_uri_provider
	check_unpacked_provider
	filelist_install_provider
	gnome_prefix_global=NONE
	;;
    prefix )
# FIXME: better symptomas
	if grep -q -r --include=configure.in 'PKG_CHECK_MODULES.*\(gnome\)' . ; then
	    gnome_default_prefix
	    if pwiz_ask_yesno "Package seems to be GNOME2 related. Use standard GNOME2 prefix for your package." \
		"It is generally good idea to put GNOME2 related stuff to GNOME2 prefix. Otherwise you can encounter problems. You should most probably answer yes." \
		q=gnome_prefix default=true p[0]=70 ; then
	    prefix="$gnome_prefix_global"
	    fi
	fi
	return
	;;
    package_search_uri )
# FIXME: ugly temporary solution:
	if test -d "$PWIZ_CACHEDIR/ftp/${package_search_uri#ftp://}/.listing" ; then
	    package_default=false
	else
	    package_default=true
	fi
	if pwiz_ask_yesno "Do FTP lookup now?" \
	    "Now you can lookup for FTP. Stored version will be used otherwise." \
	    default=$package_default p=90 ; then
	    ftp_list ftp://ftp.gnome.org/pub/GNOME/sources gnome_check_uri
	fi
	return
	;;
    check_unpacked )
	gnome_gconf_used=false
	if grep -q -r --include=configure.in AM_GCONF_SOURCE_2 . ; then
	    gnu_configure_args="$gnu_configure_args --disable-schemas-install"
	    gnome_gconf_used=true
	else
	    if grep -q -r --include=Makefile.am GCONF_SCHEMAS_INSTALL . ; then
		pwiz_phase_add_run install_before_action "export GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1"
		pwiz_phase_add_run install_after_action  "unset GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL"
		gnome_gconf_used=true
	    fi
	fi
	;;
    filelist_install )
	if $gnome_gconf_used ; then
	    gnome_gconf_schemas_list=
	    exec 3<$filelist_file
	    while read -u3 gnome_file ; do
		gnome_file=${gnome_file% *}
		case "$gnome_file" in
# FIXME - gnome-panel needs more
		    *.schemas )
			gnome_gconf_schemas_list="$gnome_gconf_schemas_list ${gnome_file##*/}"
			;;
		esac
	    done
	    exec 3<&-
	    if ! test -z "$gnome_gconf_schemas_list" ; then
		pwiz_phase_add_run gnome_gconf_install 'export GCONF_CONFIG_SOURCE=`gconftool-2 --get-default-source`'
		for gnome_file in $gnome_gconf_schemas_list ; do
# FIXME: real_uninstall, maybe add path
		    pwiz_phase_add_run gnome_gconf_install "gconftool --makefile-install-rule $gnome_file"
		done
	    fi
	fi
	return
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

function gnome_default_prefix {
    if test "$gnome_prefix_global" = NONE ; then
	pwiz_ask_string "Select default GNOME2 prefix." \
	    "In some products, all GNOME2 related packages can have different prefix, than rest of system. You should now enter this prefix. It is a directory, where most GNOME2 packages should go. Use /usr/local for manual installations, /usr for installations with packaging system, eventually $HOME for userland installation." \
	    q=gnome_prefix_global valid=product default[0]=@global@ string[0]="PWIZ system default prefix ($prefix_global)" p[0]=50 default[1]=/opt/gnome p[1]=40
	gnome_prefix_global=$pwiz_answer
    fi
}

# FIXME: maybe to FTP module, at least partially?
# Internal callback.
function gnome_check_uri {
    if test "${1##*/}" = "$package_basename" ; then
# Setting low p=20, because many foreign packages are outdated there.
	package_search_uri_guess "$1" 10
    fi
}
