#! /bin/bash

case $1 in
    desc )
	echo "GNOME PWIZ framework"
	return
	;;
    longdesc )
	echo "This module adds intelligent guesses for GNOME related packages. It means, for example: searching for source in GNOME FTP, working with gnome paths, proper installing of GNOME packages."
	return
	;;
    init )
	pwiz_module_needs prefix ldconfig package filelist_simplify
	pwiz_phase_new gnome_gconf_install after ldconfig
	prefix_provider
	package_search_uri_provider
	pwiz_phase_add_callme PREPARE_CHECK
	filelist_install_provider
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ gnome_prefix
#
# Ask, if package will use GNOME global prefix. (internal)
function gnome_prefix {
# FIXME: better symptomas
    if grep -q -r --include=configure.in 'PKG_CHECK_MODULES.*\(gnome\|GNOME\)' . ; then
	gnome_default_prefix
	if pwiz_ask_yesno "Package seems to be GNOME2 related. Use standard GNOME2 prefix for your package." \
	    "It is generally good idea to put GNOME2 related stuff to GNOME2 prefix. Otherwise you can encounter problems. You should most probably answer yes." \
	    q=gnome_prefix default=true c[0]=50 importance=20 ; then
	    prefix="$gnome_prefix_global"
	fi
    fi
}

#@ gnome_package_search_uri
#
# Provides an URI guess for searching packages in GNOME FTP. (internal)
function gnome_package_search_uri {
    ftp_list ftp://ftp.gnome.org/pub/GNOME/sources gnome_check_uri
}

#@ gnome_PREPARE_CHECK
#
# Checks, whether package uses GConf. If yes, set proper configure/install. (internal)
function gnome_PREPARE_CHECK {
    gnome_gconf_used=false
    if grep -q -r --include=configure.in AM_GCONF_SOURCE_2 . ; then
	gnu_configure_add_arg --disable-schemas-install
	gnome_gconf_used=true
    else
	if grep -q -r --include=Makefile.am GCONF_SCHEMAS_INSTALL . ; then
	    pwiz_phase_add_run install_before_action "export GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1"
	    pwiz_phase_add_run install_after_action  "unset GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL"
	    gnome_gconf_used=true
	fi
    fi
}

#@ gnome_filelist_install
#
# Checks, whether package uses GConf. If yes, add gconftool call to postinstallation. (internal)
function gnome_filelist_install {
    local file
    if $gnome_gconf_used ; then
	gnome_gconf_schemas_list=
	filelist_read_open
	while filelist_read_item ; do
	    case "$filelist_tag_name" in
# FIXME - gnome-panel needs more
		*.schemas )
		    gnome_gconf_schemas_list="$gnome_gconf_schemas_list ${filelist_tag_name##*/}"
		    ;;
	    esac
	done
	filelist_read_close
	if ! test -z "$gnome_gconf_schemas_list" ; then
# FIXME: Those are SuSE specific.
# FIXME: gnome prefix without leading /
	    pwiz_phase_add_run gnome_gconf_install 'export GCONF_CONFIG_SOURCE=`opt/gnome/bin/gconftool-2 --get-default-source`'
	    for file in $gnome_gconf_schemas_list ; do
# FIXME: real_uninstall
		pwiz_phase_add_run gnome_gconf_install "opt/gnome/bin/gconftool-2 --makefile-install-rule etc/opt/gnome/gconf/schemas/$file >/dev/null"
	    done
	fi
    fi
}

#@ gnome_default_prefix
#
# Asks for default GNOME prefix in product. (internal)
function gnome_default_prefix {
    pwiz_ask_string "Select default GNOME2 prefix." \
	"In some products, all GNOME2 related packages can have different prefix, than rest of system. You should now enter this prefix. It is a directory, where most GNOME2 packages should go. Use /usr/local for manual installations, /usr for installations with packaging system, eventually $HOME for userland installation." \
	q=gnome_prefix_global valid=vendor importance=60 default[0]=@global@ string[0]="PWIZ system default prefix ($prefix_global)" default[1]=/opt/gnome
}

#@ gnome_check_uri
#
# If package is in GNOME FTP, suggest download URI. (internal)

# FIXME: maybe to FTP module, at least partially?
# Internal callback.
function gnome_check_uri {
    if test "${1##*/}" = "$package_basename" ; then
# Setting low credit, because many foreign packages are outdated there.
	package_search_uri_guess "$1" 10
    fi
}

filelist_simplify_add_pattern "pkgconfig/*.pc"
