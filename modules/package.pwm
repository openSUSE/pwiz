#! /bin/bash

case $1 in
    desc )
	echo "package selection dialog"
	return
	;;
    longdesc )
	echo "This module provides basic dialog for package selection."
	return
	;;
    init )
	pwiz_module_uses unpack version
	pwiz_phase_new package after project
	pwiz_phase_add_callme package
	;;
package )
# FIXME: split to more phases
# FIXME: implement selection "try another version" and search this version' URL
# FIXME: implement to all error questions: error_default_list
# FIXME: pwiz_project_ -> package_ for names not present in key
	pwiz_ask_string "Project name (name of project for PWIZ)." \
	    "Now you should enter canonical project name. The name can be global project name, or any selected, if there is a reason for different name." \
	    q=package_name valid=setup
	pwiz_project_project="$pwiz_answer"
	pwiz_ask_string "Global project source base file name." \
	    "Now you should enter project base file name (i. e. name without prefix, suffix and version). This can be a string or extended pattern (see extglob in bash(1))." \
	    q=package_base default="$pwiz_project_project" p=70
	pwiz_project_base="$pwiz_answer"
# FIXME ask for home page
# FIXME !!!!!!!!!!!!!!!!!! ask for URI, call URI guessers
	pwiz_ask_string "Enter package search URI." \
	    "Package search URI is top-level URI, where sources are searched. Can be space separated list." \
	    q=package_search_uri valid=project
	package_search_uri="$pwiz_answer"
# FIXME: subproject
# FIXME: more sources with more policies
	version_ask_policy
	version_ask_product_policy

# FIXME: ugly temporary solution:
	if test -d "$PWIZ_CACHEDIR/ftp/${package_search_uri#ftp://}" ; then
	    package_default=false
	else
	    package_default=true
	fi
	if pwiz_ask_yesno "Do FTP lookup now?" \
	    "Now you can lookup for FTP. Stored version will be used otherwise." \
	    default=$package_default p=90 ; then
# FIXME: ugly callback
	    pwiz_callback=package_parse_uri
	    unset package_latest_version_array
	    ftp_list_recursive $package_search_uri
	    pwiz_callback=echo
	    echo "*** Latest URI: $package_latest_uri"
	    echo "*** Latest URI: Latest version: $package_latest_version"
	    pwiz_ask_string "Enter latest version." \
		"Now you can specify latest version. Default is most probably the latest." \
		q=package_latest_version valid=product default=$package_latest_version p=95
	    pwiz_project_version=$pwiz_answer
	    pwiz_ask_string "Enter latest version URI." \
		"Now you can specify URI of latest version. Default is most probably the latest URI." \
		q=package_latest_uri valid=product default=$package_latest_uri p=95
	    package_uri=$pwiz_answer
	else
	    pwiz_ask_string "Enter latest version." \
		"Now you can specify latest version. Default is most probably the latest." \
		q=package_latest_version valid=product
	    pwiz_project_version=$pwiz_answer
	    pwiz_ask_string "Enter latest version." \
		"Now you can specify latest version. Default is most probably the latest." \
		q=package_latest_uri valid=product
	    package_uri=$pwiz_answer
	fi
	package_parse_uri "$package_uri"
	pwiz_projectdirs_init
# FIXME: ugly, use storage engine
# FIXME: guess type by contents, not URI. Report conflicts.
	if test -f "$PWIZ_CACHEDIR/${package_uri##*/}" ; then
	    if pwiz_ask_yesno "Download file now?" \
		"Now you can dowload file." \
		default=false p=90 ; then
		ftp_get "$package_uri"
	    fi
	else
	    if pwiz_ask_yesno "Download file now?" \
		"Now you can dowload file." \
		default=true p=90 ; then
		ftp_get "$package_uri"
	    fi
	fi
	return
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ package_parse_uri URI
# FIXME: Rename this function.
# Returns: 0: known archive
# 1: unknown file
# Returns: $pwiz_result - stripped package version
function package_parse_uri {
    local version_save
    echo "=== $1"
    if unpack_check_extension "$1" ; then
	pwiz_result="${pwiz_result##*/}"
	shopt -s extglob
	if test "$pwiz_result" = "${pwiz_result#$pwiz_project_base}" ; then
	    echo "is not archive of required package"
	    shopt -u extglob
	    return 1
	else
	    pwiz_result="${pwiz_result#$pwiz_project_base}"
	    shopt -u extglob
# package-version separators
	    pwiz_result="${pwiz_result#[-_]}"
	    echo is archive ${pwiz_result##*/}
#!!!!! FIXME
	    version_save="$pwiz_result"
	    version_parse "$pwiz_result"
	    version_compare pwiz_result package_latest_version_array

	    if version_policy_check pwiz_result ; then
		echo "*** is latest version yet found"
		package_latest_version="$version_save"
		package_latest_version_array=( "${pwiz_result[@]}" )
		package_latest_uri="$1"
	    else
		echo "*** is latest version yet found, but not considered usable"
	    fi
	fi
    else
	echo is not archive
	return 1
    fi
}
