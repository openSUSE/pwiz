#! /bin/bash

# FIXME: implement package_version in addition to pwiz_project_version

case $1 in
    desc )
	echo "package selection dialog"
	return
	;;
    longdesc )
	echo "This module provides basic dialog for package selection."
	return
	;;
    init )
	pwiz_module_uses unpack version
	pwiz_phase_new package after PROJECT
	pwiz_phase_new_3_guess package_project after PROJECT
	pwiz_phase_new_3_guess package_basename after package_project_set
	pwiz_phase_new_3_guess package_home_page after package_basename_set
	pwiz_phase_new_3_guess package_search_uri after package_home_page_set
	pwiz_phase_new_call package_policy after package_search_uri_set
# FIXME: finish splitting
	pwiz_phase_new_call package_download after package_policy
	pwiz_debug_feature uri "URI search progress" "This feature turns on verbose displaying of searching of URI."
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

function package_project_prepare {
    unset pwiz_project_project
}

function package_project_set {
# FIXME: implement selection "try another version" and search this version' URL
# FIXME: implement to all error questions: error_default_list
# FIXME: pwiz_project_ -> package_ for names not present in key
    pwiz_ask_string "Project name (name of project for PWIZ)." \
	"Now you should enter canonical project xname. The name can be global project name, or any selected, if there is a reason for different name." \
	q=pwiz_project_project valid=setup
}

function package_basename_prepare {
    unset package_basename
}

function package_basename_set {
# FIXME: setting valid=product is not perfect, but in this moment we do not know version.
    pwiz_ask_string "Global project source base file name." \
	"Now you should enter project base file name (i. e. name without prefix, suffix and version). This can be a string or extended pattern (see extglob in bash(1))." \
	q=package_basename default="$pwiz_project_project" valid=product p=80 c=25
}

function package_home_page_prepare {
    unset package_home_page
}

function package_home_page_set {
    pwiz_ask_string "Enter package home page." \
	"Package home page is URI, where home WWW (or FTP) page resides." \
	q=package_home_page valid=project default=""
}

function package_search_uri_prepare {
    unset package_search_uri
}

function package_search_uri_set {
    pwiz_ask_string "Enter package search URI." \
	"Package search URI is top-level URI, where sources are searched. Can be space separated list." \
	q=package_search_uri valid=project
}

function package_policy {
# FIXME: subproject
# FIXME: more sources with more policies
    version_ask_policy
    version_ask_product_policy
}

# FIXME: finish splitting
function package_download {
# FIXME: ugly temporary solution:
    if test -d "$PWIZ_CACHEDIR/ftp/${package_search_uri#ftp://}" ; then
	package_default=false
    else
	package_default=true
    fi
    if pwiz_ask_yesno "Do FTP lookup now?" \
	"Now you can lookup for FTP. Stored version will be used otherwise." \
	default=$package_default p=90 ; then
# FIXME: ugly callback
# FIXME: If new version comes, has less priority than old one. The same for URI.
# FIXME: p=200
	unset package_latest_version_array
	package_latest_unpack_priority=0
	ftp_list_recursive $package_search_uri package_parse_uri
	decho_uri "latest URI: $package_latest_uri"
	decho_uri "latest version: $package_latest_version"
	pwiz_ask_string "Enter latest version." \
	    "Now you can specify latest version. Default is most probably the latest." \
	    q=package_latest_version valid=product default=$package_latest_version p=200
# FIXME: Use default answer variable
	pwiz_project_version=$pwiz_answer
	pwiz_ask_string "Enter latest version URI." \
	    "Now you can specify URI of latest version. Default is most probably the latest URI." \
	    q=package_latest_uri valid=product default=$package_latest_uri p=200
# FIXME: Use default answer variable
	package_uri=$pwiz_answer
    else
	pwiz_ask_string "Enter latest version." \
	    "Now you can specify latest version. Default is most probably the latest." \
	    q=package_latest_version valid=product
# FIXME: Use default answer variable
	pwiz_project_version=$pwiz_answer
	pwiz_ask_string "Enter latest version URI." \
	    "Now you can specify latest version. Default is most probably the latest." \
	    q=package_latest_uri valid=product
# FIXME: Use default answer variable
	package_uri=$pwiz_answer
    fi
    package_parse_uri "$package_uri"
    pwiz_projectdirs_init
# FIXME: ugly, use storage engine
# FIXME: guess type by contents, not URI. Report conflicts.
    if test -f "$PWIZ_CACHEDIR/${package_uri##*/}" ; then
	if pwiz_ask_yesno "Download file now?" \
	    "Now you can dowload file." \
	    default=false p=90 ; then
	    ftp_get "$package_uri"
	fi
    else
	if pwiz_ask_yesno "Download file now?" \
	    "Now you can dowload file." \
	    default=true p=90 ; then
	    ftp_get "$package_uri"
	fi
    fi
}

#@ package_parse_uri URI
# URI: URI to be parsed
# returns: 0: known archive, 1: unknown file
# returns $pwiz_result: stripped package version
#
# URI parser searching archives of current project and its versions.

# FIXME: Rename this function.
function package_parse_uri {
    local version_save
    decho_uri -n "$1..."
    if unpack_check_extension "$1" ; then
	pwiz_result="${pwiz_result##*/}"
	shopt -s extglob
	if test "$pwiz_result" = "${pwiz_result#$package_basename}" ; then
	    decho_uri " not archive of required package"
	    shopt -u extglob
	    return 1
	else
	    pwiz_result="${pwiz_result#$package_basename}"
	    shopt -u extglob
# package-version separators
	    pwiz_result="${pwiz_result#[-_]}"
	    decho_uri -n " is archive of ${pwiz_result##*/}"
#!!!!! FIXME
	    version_save="$pwiz_result"
	    version_parse "$pwiz_result"
	    if version_policy_check pwiz_result ; then
		if version_compare pwiz_result package_latest_version_array ; then
		    decho_uri " - latest version yet found"
		    package_latest_version="$version_save"
		    package_latest_version_array=( "${pwiz_result[@]}" )
		    package_latest_uri="$1"
		    package_latest_unpack_priority=$unpack_priority
		else
		    if test $? = 2 -a $unpack_priority -gt $package_latest_unpack_priority ; then
			decho_uri " - equal to latest version, but has preferred format"
			package_latest_version="$version_save"
			package_latest_version_array=( "${pwiz_result[@]}" )
			package_latest_uri="$1"
			package_latest_unpack_priority=$unpack_priority
		    else
			decho_uri " - newer or equal version exists"
		    fi
		fi
	    else
		decho_uri " - disabled by policy"
	    fi
	fi
    else
	decho_uri " not archive"
	return 1
    fi
}
