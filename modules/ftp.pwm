#! /bin/bash

case $1 in
    desc )
	echo "anonymous FTP downloading and listing"
	return
	;;
    longdesc )
	echo "This module provides functions for anonymous FTP listings and downloads."
	return
	;;
    init )
	pwiz_module_needs uri
	uri_provider
	case $OPTCNT_VERBOSE in
	    0 )
		ftp_WGET="wget -q"
		;;
	    1 )
		ftp_WGET="wget -nv"
		;;
	    * )
		ftp_WGET="wget -v"
		;;
	esac
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ ftp_exists URI
# URI: URI to be checked
# returns: 0: URI exists, 1: URI does not exist
#
# Check, whether specified URI exists.
function ftp_exists {
    $ftp_WGET --spider "$1"
}

#@ ftp_get uri provider domain path file
# uri: complete URI
# provider: provider part of URI
# domain: domain part of URI
# path: path part of URI
# file: file name to be downloaded to
# 
# Download a file using FTP protocol.
function ftp_get {
    local rc PWD_save
    PWD_save=$PWD
    cd $PWIZ_CACHEDIR
    $ftp_WGET -N "$1"
    rc=$?
    cd "$PWD_save"
    if test -z "${4##*/}" ; then
	mv "$PWIZ_CACHEDIR/.listing" "$5"
    else
	mv "$PWIZ_CACHEDIR/${4##*/}" "$5"
    fi
    return $rc
}

#@ ftp_list uri provider domain path uri_list_callback
# uri: complete URI
# provider: provider part of URI
# domain: domain part of URI
# path: path part of URI
# uri_list_callback: callback for found items
#
# Call callback for all found FTP objects.
function ftp_list {
    mkdir -p $PWIZ_CACHEDIR/ftp
    $ftp_WGET -P $PWIZ_CACHEDIR/ftp -N  --no-remove-listing -r -l 1 "$1/"
    if ! test -f "$PWIZ_CACHEDIR/ftp/${1#ftp://}/.listing" ; then
	echo "*** $1 not found"
	return 1
    fi
    ftp_list_callback "${1#ftp://}/.listing" "$5"
}

#@ ftp_list_recursive uri provider domain path uri_list_callback
# uri: complete URI
# provider: provider part of URI
# domain: domain part of URI
# path: path part of URI
# uri_list_callback: callback for found items
#
# Call callback for all recursivelly found FTP objects.

# FIXME: Check, whether works for atypical characters in URI
# FIXME: replace echo by debug commands
function ftp_list_recursive {
    local callback_save callback_sub
    mkdir -p $PWIZ_CACHEDIR/ftp
    $ftp_WGET -P $PWIZ_CACHEDIR/ftp -N  --no-remove-listing -r -R '*' "$1/"
    if ! test -f "$PWIZ_CACHEDIR/ftp/${1#ftp://}/.listing" ; then
	echo "*** $1 not found"
	return 1
    fi
    shopt -s dotglob
    callback_save=$pwiz_callback
    callback_sub=$5
    pwiz_callback=ftp_list_callback
    pwiz_find "${1#ftp://}" $PWIZ_CACHEDIR/ftp/ "$callback_sub"
    pwiz_callback=$callback_save
    shopt -u dotglob
}

# ftp_list_callback (internal function)
# FIXME: symlinks in listings
function ftp_list_callback {
    local flags links user group size mount day yearhour name
# FIXME:???
    if test "${1##*/}" = .listing ; then
	exec 3<"$PWIZ_CACHEDIR/ftp/$1"
	while read -u3 flags links user group size mount day yearhour name ; do
	    eval name=$'"${name%%\r}"'
	    pwiz_canonize "${1%/.listing}/$name"
	    $2 "ftp://$pwiz_result"
	done
	exec 3<&-
    fi
}
