#! /bin/bash

case $1 in
    desc )
	echo "checks for GNU configure"
	return
	;;
    longdesc )
	echo "This module checks, whether package uses GNU configure. If yes, asks arguments. Third party scripts can modify \$gnu_configure_args for automatic inclusion to argument list."
	return
	;;
    init )
# FIXME: Name conventions of "three phase action"
# FIXME: gnu_make now not needed
# FIXME: Add phase for users or wrapper instead of plain use configure_args.
	pwiz_knowledge_feature build "package building process" "Knowledge on general package configuration and compilation."
	pwiz_module_uses prefix gnu_make
	pwiz_phase_new configure_check after PREPARE_CHECK
	pwiz_phase_new configure_options after BUILD_SETENV
	pwiz_phase_new configure_args after BUILD_SETENV
	pwiz_phase_new configure after BUILD_CONF
	pwiz_phase_new configure_make after BUILD_COMPILE
	pwiz_phase_new configure_install after INSTALL_ACTION
# configure_fallback_check is reserved for last-in-resort failure check.
# FIXME: wait for pwiz_error_checkpoint implementation
	pwiz_phase_new configure_fallback_check after configure
	pwiz_debug_feature gnu_configure_paths "paths in Makefiles" "This feature turns on verbose displaying of results of searching for standard GNU paths in Makefiles."

	gnu_configure_args=
	pwiz_phase_add_callme configure_check
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ gnu_configure_add_arg [ arg ]
# arg: argument to be added to configure arguments
#
# Add argument for configure script.
# NOTE: If your arguments needs quotes and special characters, you
#have to escape them to prevent double bash expansion.
function gnu_configure_add_arg {
    gnu_configure_args="$gnu_configure_args\\
	$1"
}

#@ gnu_configure_configure_check
#
# Check for GNU configure script. (internal)
function gnu_configure_configure_check {
    local c=0
    local default=false
    if test -f configure ; then
	c=10
	if test -f configure.in ; then
	    let c=c+30
	fi
	if grep -ql "Generated by GNU Autoconf" configure ; then
	    let c=c+30
	fi
	default=true
    fi
    if test $c -gt 0 ; then
# FIXME: why answer is not cached???
	if pwiz_ask_yesno \
	    "This package contains configure script. Is GNU configure compatible?" \
	    "To ensure platform independence, many packages contain special script configure. In most cases it is generated by GNU tools. If it is true, its standard arguments will be used." \
	    q=gnu_configure_use valid=source knowledge=build default=$default c=$c inherit=90 ; then
	    pwiz_phase_add configure_args gnu_configure_args
	    pwiz_phase_add configure gnu_configure_configure
# FIXME: Use manual checkpoint, move to init
	    pwiz_phase_add configure_fallback_check gnu_configure_fallback_check
	    pwiz_phase_add configure_make gnu_configure_make
	    pwiz_phase_add configure_install gnu_configure_install
# FIXME!!!!! installroot can or cannot be available. Use RPM %expansion
#		pwiz_phase_add_run_eval install_action 'make DESTDIR=$PWIZ_INSTALLROOT install'
# FIXME: pwiz_rune does not need this expansion, but direct run yes
# maybe FIXME: activate gnu_make instead
# FIXME: $gnu_make_vars are ignored
# FIXME: separate phase
	fi
    fi
}

#@ gnu_configure_add_path_arg_opt_add arg_name default_dir
# arg_name: name of path argument
# default_dir: default directory
#
# If selected path is used in some file, it is added into configure
#args. (internal function)
# It provides an argument, if:
# - it is not fall back to default
# and
# - it is cited in any *.in file except Makefile.in
# or
# - it is used cited in any Makefile.in (it is used there nearly all times)

# FIXME: Better we should parse generated file list in configure.{ac,in}
function gnu_configure_add_path_arg_opt_add {
    local arg_name=--${1/_/-}
    eval local arg_val\=\"\$$1\"
    eval "local arg_used=\$gnu_configure_path_is_needed_$1"
    if $arg_used ; then
	gnu_configure_add_arg $arg_name=$arg_val
    fi
}

#@ gnu_configure_add_path_is_used arg_name
# arg_name: name of path argument
# returns $gnu_configure_path_is_used_{arg_name}: is used, 1: is not used
#
# Checks, whether named argument:
# - is cited (or pkg{arg_name}) in any *.in file except Makefile.in or
#- Makefile.am
# or
# - is used (or pkg{arg_name}) in any Makefile.in (it is used there
#nearly all times) (internal function)
function gnu_configure_path_is_used {
    eval gnu_configure_path_is_used_$1\=true
    if ! find -type f -name 'Makefile.am' -print0 | xargs --null grep -ql '\(\$(\|@\)'$1'\()\|@\)' ; then
	if ! find -type f -name '*.in' -a \! -name Makefile*.in -print0 | xargs --null fgrep -ql '@'$1'@' ; then
	    if test -z "$(find -type f -name 'Makefile.in' -print0 | xargs --null cat 2>/dev/null | sed '\%^\(pkg\|\)'$1' = \(\$(\|@\)'$1'\()\|@\)%d' | grep -l '\(\$(\|@\)\(pkg\|\)'$1'\()\|@\)' )" ; then
		eval gnu_configure_path_is_used_$1\=false
		decho_gnu_configure_paths "no meaningful occurrence of $1 in Makefiles"
	    fi
	fi
    fi
}

#@ gnu_configure_path_default_check arg_name default_dir dep_arg
# arg_name: name of path argument
# default_dir: default directory in GNU tools
# dep_arg: name of path argument, on which arg_name depends
# returns gnu_configure_path_is_used_*: alters values if needed
# returns gnu_configure_path_is_needed_{arg_name}: needed for configure?
#
# Check, whether path is set to GNU tools default. If yes, mark
#dep_arg as used and mark argument for inclusion to configure.
#(internal)
function gnu_configure_path_default_check {
    eval : \${gnu_configure_path_is_needed_$1:=false}
    eval local arg_val\=\"\$$1\"
    if test "$arg_val" = "$2" ; then
	eval gnu_configure_path_is_used_$3\=true
    else
	eval "if \$gnu_configure_path_is_used_$1 ; then
	    gnu_configure_path_is_needed_$1=true
	fi"
    fi
}

#@ gnu_configure_args
#
# Complete arguments for configure. (internal)
function gnu_configure_args {
# FIXME: dependent on $ac_default_prefix in $CONFIG_SITE (to be sure on defaults, we should resource $CONFIG_SITE).
	gnu_configure_path_is_used prefix
	gnu_configure_path_is_used exec_prefix
	gnu_configure_path_is_used bindir
	gnu_configure_path_is_used sbindir
	gnu_configure_path_is_used libexecdir
	gnu_configure_path_is_used datadir
	gnu_configure_path_is_used sysconfdir
	gnu_configure_path_is_used sharedstatedir
	gnu_configure_path_is_used localstatedir
	gnu_configure_path_is_used libdir
	gnu_configure_path_is_used includedir
# FIXME: oldincludedir probably not needed
	gnu_configure_path_is_used infodir
	gnu_configure_path_is_used mandir

	gnu_configure_path_default_check bindir "$prefix/bin" exec_prefix
	gnu_configure_path_default_check sbindir "$prefix/sbin" exec_prefix
	gnu_configure_path_default_check libexecdir "$prefix/libexec" exec_prefix
	gnu_configure_path_default_check datadir "$prefix/share" prefix
	gnu_configure_path_default_check sysconfdir "$prefix/etc" prefix
	gnu_configure_path_default_check sharedstatedir "$prefix/com" prefix
	gnu_configure_path_default_check localstatedir "$prefix/var" prefix
	gnu_configure_path_default_check libdir "$prefix/lib" exec_prefix
	gnu_configure_path_default_check includedir "$prefix/include" prefix
	gnu_configure_path_default_check infodir "$prefix/info" prefix
	gnu_configure_path_default_check mandir "$prefix/man" prefix
	gnu_configure_path_default_check exec_prefix "$prefix" prefix
	gnu_configure_path_default_check prefix "/usr/local"

	gnu_configure_add_path_arg_opt_add prefix /usr/local
	gnu_configure_add_path_arg_opt_add exec_prefix "$prefix"
	gnu_configure_add_path_arg_opt_add bindir "$prefix/bin"
	gnu_configure_add_path_arg_opt_add sbindir "$prefix/sbin"
	gnu_configure_add_path_arg_opt_add libexecdir "$prefix/libexec"
	gnu_configure_add_path_arg_opt_add datadir "$prefix/share"
	gnu_configure_add_path_arg_opt_add sysconfdir "$prefix/etc"
	gnu_configure_add_path_arg_opt_add sharedstatedir "$prefix/com"
	gnu_configure_add_path_arg_opt_add localstatedir "$prefix/var"
	gnu_configure_add_path_arg_opt_add libdir "$prefix/lib"
	gnu_configure_add_path_arg_opt_add includedir "$prefix/include"
# FIXME: oldincludedir probably not needed
	gnu_configure_add_path_arg_opt_add infodir "$prefix/info"
	gnu_configure_add_path_arg_opt_add mandir "$prefix/man"
# FIXME: some way to use docdir
    pwiz_ask_string \
	"This package will use configure script with following arguments:$gnu_configure_prefix_args$gnu_configure_args
Do you want any additional options?" \
    "Most GNU configure scripts has optional arguments to turn on or off some features or specify search paths. Some of them can be guesses, but other needs to be defined manually. Now you can define them." \
    q=gnu_configure_extra_args default[0]="" p[0]=50 default[1]=@@help@@ string[1]="GNU configure --help"
    if test "$pwiz_answer" = "@@help@@" ; then
# FIXME use pwiz_find
	find -name configure -exec {} --help \;
	pwiz_stage_prev
    fi
# FIXME: remove extra args and make everything in single function
    if test -z "$pwiz_answer" ; then
	gnu_configure_extra_args=""
    else
	gnu_configure_extra_args="\\
	$pwiz_answer"
    fi
}

#@ gnu_configure_configure
#
# Add a new stage and run configure. (internal)
function gnu_configure_configure {
# FIXME: write generic pwiz_shell_fmt and fix multi_line commands in core
#    local string="$(echo $./configure$gnu_configure_args$gnu_configure_extra_args | fmt | sed 's/$/\\/;$s/\\\\$//' )"
#    pwiz_phase_add_run configure "$string"
    pwiz_phase_add_run configure "./configure$gnu_configure_args$gnu_configure_extra_args"

# FIXME: will be obsoleted by fallback checks
    pwiz_phase_add configure 'gnu_configure_rc=$pwiz_run_rc'
}

#@ gnu_configure_make
#
# Add a new stage and run configure-wise make. (internal)
function gnu_configure_make {
    pwiz_phase_add_run configure_make "make$gnu_make_vars"
}

#@ gnu_configure_install
#
# Add a new stage and run configure-wise installation. (internal)
function gnu_configure_install {
    pwiz_phase_add_run configure_install "make$gnu_make_vars DESTDIR=\$RPM_BUILD_ROOT install"
}

# FIXME: Will be obsoleted.
function gnu_configure_fallback_check {
    if test $gnu_configure_rc -ge 1 ; then
	pwiz_ask_radio \
	    "GNU configure failed and there is no known way fo fix the problem. What to do now?" \
	    "PWIZ modules can have detection of some types of errors. None of these checks was successfull. It means: You must fix it manually!" \
	    q=gnu_configure_fallback_check default[0]=reconfigure string[0]="Try another configure options." p[0]=30 default[1]=repatch string[1]="Go back to patch phase." p[1]=30
	case $pwiz_answer in
	    reconfigure )
		pwiz_phase_goto configure
		;;
	    repatch )
# FIXME to which phase?
		pwiz_phase_goto check_unpacked
		;;
	esac
    fi
}
