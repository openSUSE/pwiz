#! /bin/bash

case $1 in
    desc )
	echo "check for GNU configure"
	return
	;;
    longdesc )
	echo "This module checks, whether package uses GNU configure. If yes, asks arguments. Third party scripts can modify \$gnu_configure_args for automatic inclusion to argument list."
	return
	;;
    init )
# FIXME: Name conventions of "three phase action"
# FIXME: gnu_make now not needed
	pwiz_module_uses prefix gnu_make
	pwiz_phase_new configure_check after PREPARE_CHECK
	pwiz_phase_new configure_options after BUILD_SETENV
	pwiz_phase_new configure_args after BUILD_SETENV
	pwiz_phase_new configure after BUILD_CONF
	pwiz_phase_new configure_make after BUILD_COMPILE
	pwiz_phase_new configure_install after INSTALL_ACTION
# configure_fallback_check is reserved for last-in-resort failure check.
# FIXME: wait for pwiz_error_checkpoint implementation
	pwiz_phase_new configure_fallback_check after configure

	gnu_configure_args=
	pwiz_phase_add_callme configure_check
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

function gnu_configure_configure_check {
    if test -f configure ; then
# FIXME: why answer is not cached???
	if pwiz_ask_yesno \
	    "This package contains configure script. Is it GNU configure?" \
	    "To ensure platform independence, many packages contain special script configure. In most cases it is generated by GNU tools. If it is true, its standard arguments will be used." \
	    q=gnu_configure_use valid=source knowledge=build default=true p=90 inherit=90 ; then
	    pwiz_phase_add configure_args gnu_configure_args
	    pwiz_phase_add configure gnu_configure_configure
# FIXME: Use manual checkpoint, move to init
	    pwiz_phase_add configure_fallback_check gnu_configure_fallback_check
	    pwiz_phase_add configure_make gnu_configure_make
	    pwiz_phase_add configure_install gnu_configure_install
# FIXME!!!!! installroot can or cannot be available. Use RPM %expansion
#		pwiz_phase_add_run_eval install_action 'make DESTDIR=$PWIZ_INSTALLROOT install'
# FIXME: pwiz_rune does not need this expansion, but direct run yes
# maybe FIXME: activate gnu_make instead
# FIXME: $gnu_make_vars are ignored
# FIXME: separate phase
	fi
    fi
}

function gnu_configure_args {
# FIXME: dependent on $ac_default_prefix
    if test "$prefix" != /usr/local ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --prefix=$prefix"
    fi
    if test "$exec_prefix" != "$prefix" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --exec-prefix=$exec_prefix"
    fi
    if test "$bindir" != "$prefix/bin" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --bindir=$bindir"
    fi
    if test "$sbindir" != "$prefix/sbin" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --sbindir=$sbindir"
    fi
    if test "$libexecdir" != "$prefix/libexec" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --libexecdir=$libexecdir"
    fi
    if test "$datadir" != "$prefix/share" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --datadir=$datadir"
    fi
    if test "$sysconfdir" != "$prefix/etc" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --sysconfdir=$sysconfdir"
    fi
    if test "$sharedstatedir" != "$prefix/com" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --sharedstatedir=$sharedstatedir"
    fi
    if test "$localstatedir" != "$prefix/var" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --localstatedir=$localstatedir"
    fi
    if test "$libdir" != "$prefix/lib" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --libdir=$libdir"
    fi
    if test "$includedir" != "$prefix/include" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --includedir=$includedir"
    fi
# FIXME: oldincludedir probably not needed
    if test "$infodir" != "$prefix/info" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --infodir=$infodir"
    fi
    if test "$mandir" != "$prefix/man" ; then
	gnu_configure_prefix_args="$gnu_configure_prefix_args --mandir=$mandir"
    fi
# FIXME: some way to use docdir
    pwiz_ask_string \
	"This package will use configure script with following arguments:$gnu_configure_prefix_args$gnu_configure_args
Do you want any additional options?" \
    "Most GNU configure scripts has optional arguments to turn on or off some features or specify search paths. Some of them can be guesses, but other needs to be defined manually. Now you can define them." \
    q=gnu_configure_extra_args default[0]="" p[0]=70 default[1]=@@help@@ string[1]="GNU configure --help" p[1]=0
    if test "$pwiz_answer" = "@@help@@" ; then
# FIXME use pwiz_find
	find -name configure -exec {} --help \;
	pwiz_stage_prev
    fi
    if test -z "$pwiz_answer" ; then
	gnu_configure_extra_args=""
    else
	gnu_configure_extra_args=" $pwiz_answer"
    fi
}

function gnu_configure_configure {
    pwiz_phase_add_run configure "./configure$gnu_configure_prefix_args$gnu_configure_args$gnu_configure_extra_args"
# FIXME: will be obsoleted by fallback checks
    pwiz_phase_add configure 'gnu_configure_rc=$pwiz_run_rc'
}

function gnu_configure_make {
    pwiz_phase_add_run configure_make "make$gnu_make_vars"
}

function gnu_configure_install {
    pwiz_phase_add_run configure_install "make$gnu_make_vars DESTDIR=\$RPM_BUILD_ROOT install"
}

# FIXME: Will be obsoleted.
function gnu_configure_fallback_check {
    if test $gnu_configure_rc -ge 1 ; then
	pwiz_ask_radio \
	    "GNU configure failed and there is no known way fo fix the problem. What to do now?" \
	    "PWIZ modules can have detection of some types of errors. None of these checks was successfull. It means: You must fix it manually!" \
	    q=gnu_configure_fallback_check default[0]=reconfigure string[0]="Try another configure options." p[0]=30 default[1]=repatch string[1]="Go back to patch phase." p[1]=30
	case $pwiz_answer in
	    reconfigure )
		pwiz_phase_goto configure
		;;
	    repatch )
# FIXME to which phase?
		pwiz_phase_goto check_unpacked
		;;
	esac
    fi
}

#@ gnu_configure_add_opts [ options ]
# Add options for configure script.
function gnu_configure_add_opts {
    gnu_configure_args=" $gnu_configure_args $1"
}
