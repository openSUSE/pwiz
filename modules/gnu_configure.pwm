#! /bin/bash

case $1 in
    desc )
	echo "check for GNU configure"
	return
	;;
    longdesc )
	echo "This module checks, whether package uses GNU configure. If yes, asks arguments. Third party scripts can modify \$gnu_configure_args for automatic inclusion to argument list."
	return
	;;
    init )
	pwiz_module_needs check_unpacked gnu_make
	pwiz_phase_new configure after build
# configure_fallback_check is reserved for last-in-resort failure check.
	pwiz_phase_new configure_fallback_check after configure
	check_unpacked_init
	check_unpacked
	;;
    check_unpacked_init )
	gnu_configure_args=
	return
	;;
    check_unpacked )
	if test -f configure ; then
	    if pwiz_ask_yesno \
		"This package contains configure script. Is it GNU configure?" \
		"To ensure platform independence, many packages contain special script configure. In most cases it is generated by GNU tools. If it is true, its standard arguments will be used." \
		q=gnu_configure_use valid=source knowledge=build default=true p=90 inherit=90
	    then
		pwiz_phase_add_call configure args
		pwiz_phase_add_run_eval configure './configure$gnu_configure_prefix_args$gnu_configure_args$gnu_configure_extra_args'
		pwiz_phase_add configure 'gnu_configure_rc=$pwiz_run_rc'
		pwiz_phase_add_callme configure_fallback_check
# FIXME!!!!! installroot can or cannot be available. Use RPM %expansion
		pwiz_phase_add_run_eval install_action 'make DESTDIR=$PWIZ_INSTALLROOT install'
		gnu_configure_prefix_args=" --prefix=$prefix_global"
	    fi
	fi
	return
	;;
    args )
	pwiz_ask_string \
		"This package will use configure script with following arguments:$gnu_configure_prefix_args$gnu_configure_args
Do you want any additional options?" \
		"Most GNU configure scripts has optional arguments to turn on or off some features or specify search paths. Some of them can be guesses, but other needs to be defined manually. Now you can define them." \
		 q=gnu_configure_extra_args default[0]="" p[0]=70 default[1]=@@help@@ string[1]="GNU configure --help" p[1]=0
	if test "$pwiz_answer" = "@@help@@" ; then
# FIXME use pwiz_find
	    find -name configure -exec {} --help \;
	    pwiz_stage_prev
	fi
	if test -z "$pwiz_answer" ; then
	    gnu_configure_extra_args=""
	else
	    gnu_configure_extra_args=" $pwiz_answer"
	fi
	return
	;;
    configure_fallback_check )
	if test $gnu_configure_rc -ge 1 ; then
	    pwiz_ask_radio \
		"GNU configure failed and there is no known way fo fix the problem. What to do now?" \
		"PWIZ modules can have detection of some types of errors. None of these checks was successfull. It means: You must fix it manually!" \
		q=gnu_configure_fallback_check default[0]=reconfigure string[0]="Try another configure options." p[0]=30 default[1]=repatch string[1]="Go back to patch phase." p[1]=30
	    case $pwiz_answer in
		reconfigure )
		    pwiz_phase_goto configure
		    ;;
		repatch )
# FIXME to which phase?
		    pwiz_phase_goto check_unpacked
		    ;;
	    esac
	fi
	return
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

function gnu_configure_add_opts {
    gnu_configure_args=" $gnu_configure_args $1"
}
