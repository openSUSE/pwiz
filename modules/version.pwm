#! /bin/bash

case $1 in
    desc )
	echo "version compare functions"
	return
	;;
    longdesc )
	echo "This module compares versions. It also defines version policies (i. e. which versions are considered as usable)."
	return
	;;
    init )
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ version_parse version_string dest
# version_string: string with version
# returns ${pwiz_result[@@]}: array with version components
#
# Parses version string to its component separated by one of known
#version element separators.
function version_parse {
    local vstr substr count=0
    unset pwiz_result
    vstr="$1"
    shopt -s extglob
    while ! test -z "$vstr" ; do
	substr="${vstr##+([0-9])}"
	pwiz_result[$count]="${vstr%$substr}"
	if test "$vstr" != "$substr" ; then
# known version element separators
	    vstr="${substr#[._-]}"
	    let count++
	else
	    echo "FIXME: unparsable version substring $vstr"
	    break
	fi
    done
    shopt -u extglob
}

# FIXME: comparison and strings of alpha/beta -pre etc.
# FIXME: Include/exclude -pre and -rc from version models
# FIXME: Parse 05Aug03 versions
# FIXME: add even midnumber rule with 0.x.x exclusion (good default).

#@ version_compare p1 p2
# p1: name of array with first parsed version
# p2: name of array with second parsed version
# returns: 0: p1 newer than p2, 1: p1 older than p2, 2: p1 equal to p2
#
# Compares two versions parsed by @version_parse into arrays.
# NOTE: p2 can be an empty array
# WARNING: p1 and p2 are used without leading '$'.
function version_compare {
    local -a p1 p2 count
    eval p1='( "${'$1'[@]}" )'
    eval p2='( "${'$2'[@]}" )'
    local max=${#p1[@]}
    for (( count=0 ; count < $max ; count++ )) ; do
	# 2.3.1 > 2.3
	if test -z "${p2[$count]}" ; then
	    return 0
	fi
	if test "${p1[$count]}" -gt "${p2[$count]}" ; then
	    return 0
	else
	    if test "${p1[$count]}" -lt "${p2[$count]}" ; then
		return 1
	    fi
	fi
    done
    return 2
}

#@ version_policy_register name string hotkey
# name: function name without leading "version_policy_"
# string: text description of version policy (can be empty string)
# hotkey: version policy hotkey (can be empty string)
#
# Registers version policy to version policy registry.

# FIXME: set default
function version_policy_register {
    local id=$1
    shift
    pwiz_guess_add version_project_policy $id "" "$@"
}
version_policy_register_string=""
version_policy_register_counter=0

#@ version_policy_{type} version_array
# version_array: version array from @version_parse
# returns: 0: is considered stable, 1: is considered unstable
#
# Version policy gets release type from version string.
# WARNING: version_array is used without leading '$'

# FIXME: higher return codes should be available.

function version_policy_even_subversion_is_stable {
    local -a version_array
    eval version_array='( "${'$1'[@]}" )'
# FIXME: situation, if subversion is not number, no-test etc.
    if test -z "${version_array[1]}" ; then
	return 1
    fi
    test $(( ${version_array[1]} / 2 * 2 )) = "${version_array[1]}"
}
version_policy_register even_subversion_is_stable "even minor version means stable version"

function version_policy_any_version_is_stable {
    return
}
version_policy_register any_version_is_stable "all versions are stable versions"

#@ version_ask_policy
#
# Ask for policy. (internal)
# WARNING: Call it after setting $pwiz_project_project!
function version_ask_policy {
    eval pwiz_ask_string '"Select package version policy." \
	    "You should now define version policy of selected project your product, i. e. which versions are stable and which unstable. To define new one, you must create a module."' \
	q=version_project_policy valid=project allow_new=false
    if test "$(type -t "version_policy_$pwiz_answer")" != function ; then
	pwiz_fatal "invalid version policy $version_project_policy (probably removed some modules from PWIZ)"
    fi
}

#@ version_ask_product_policy
#
# Ask for product version policy. (internal)

# FIXME: higher return codes should be available.
function version_ask_product_policy {
	pwiz_ask_string "Select project version policy for your product." \
	    "Project version policy of your product, means, which version will qualify to your product." \
	    q=version_policy_product_threshold importance=30 \
	    string[0]="all versions will qualify" default[0]=1 c[0]=3 \
	    string[1]="only stable versions will qualify" default[1]=0 c[1]=7 \
	    valid=product allow_new=false
}

#@ version_policy_check
# returns: 0: version complies product version policy, 1: version does
#not comply product version policy
#
# Check version using actual version policy.
function version_policy_check {
    version_policy_$version_project_policy "$@"
    test $? -le $version_policy_product_threshold
}
