#! /bin/bash

case $1 in
    desc )
	echo "file list utilities"
	return
	;;
    longdesc )
	echo "This module contains framework for creating and improving file lists."
	return
	;;
    init )
# Phase providing preliminary file list during installation.
	pwiz_phase_new_call filelist_install after INSTALL_CHECK
	pwiz_phase_new_call filelist_raw after CHECKINSTALL
	pwiz_phase_new_call filelist_clean after filelist_raw
	pwiz_phase_new filelist_inspect after filelist_clean
# FIXME: not used???
	pwiz_phase_new filelist_finish after filelist_inspect
# FIXME
#	pwiz_phase_new filelist_split after filelist_fix
# FIXME: do not register twice for subsequent packages
        pwiz_run_wrapper_register installwatch_run_wrapper
	pwiz_debug_feature unowned "unowned files and directories" "This feature lists owner packages of files and directories installed in the same tree."
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

#@ filelist_install
#
# Generates preliminary file list in install phase.
function filelist_install {
    filelist_generate
}

#@ filelist_raw
#
# Calls $filelist_raw_provider_function to get raw file list.
function filelist_raw {
    #@ Raw file list name for list creator process.
    filelist_raw_file=$PWIZ_TMPDIR/filelist_raw.lst
    $filelist_raw_provider_function
}

#@ filelist_clean
#
# Cleans file list (canonicalize path, remove duplicates and some accesses).
function filelist_clean {
    #@ File list name for inspect processes.
    filelist_file=$PWIZ_TMPDIR/filelist.lst
    #@ Temporary file name for inspect processes.
    filelist_file_tmp=$PWIZ_TMPDIR/filelist.lst~
    # dual uniq makes sorting faster in many cases
    # FIXME: remove temporaries
    # fixme: sort -i
    exec 3>$PWIZ_TMPDIR/filelist_access.lst
    uniq <$filelist_raw_file | tee $filelist_raw_file.0 | filelist_raw_clean_1 | tee $filelist_raw_file.1 | LC_ALL=C sort -u | filelist_raw_clean_2 | tee $filelist_raw_file.2 >$filelist_file
    exec 3>&-
}

# echo an item for raw filelist
# FIXME: implement no install root
function filelist_raw_clean_1 {
    while filelist_read_item 0 ; do
	if test $filelist_tag_type = read ; then
	    case $filelist_tag_name in
		/proc/cpuinfo )
		    echo >&2 "ERROR: FIXME: access to machine file $filelist_tag_name!"
		    ;;
# FIXME: /usr/src/packages is system and RPM specific
		/tmp/* | /dev/* | /var/tmp/* | /proc/* | /sys/* | /usr/src/packages )
		    ;;
		* )
		    pwiz_canonize "$filelist_tag_name"
		    echo >&3 "$pwiz_result"
		    ;;
	    esac
	else
	    case $filelist_tag_name in
# FIXME: not fixed list
		$PWIZ_SRCDIR/* | $PWIZ_BUILDDIR/* | $PWIZ_SOURCESDIR/* | $PWIZ_TMPDIR/* )
		    ;;
		$PWIZ_INSTALLROOT/* )
# FIXME: Does -e work for absolute chrooted danglinks?
		    if test -e "$filelist_tag_name" ; then
			pwiz_canonize "${filelist_tag_name##$PWIZ_INSTALLROOT}"
			filelist_tag_name="$pwiz_result"
# FIXME: ignores tagext
			if test $filelist_tag_type = dir ; then
# FIXME: remove redirection
# FIXME: implement and ask more files at once
# FIXME: dump file attributes
			    echo "$filelist_tag_name dir"
			else
			    echo "$filelist_tag_name file"
			fi
		    fi
		    ;;
		/tmp/* | /dev/null | /dev/tty* | /var/tmp/* )
		    ;;
		* )
		    echo >&2 "ERROR: FIXME: access violation $filelist_tag_name"
		    ;;
	    esac
	fi
    done
}

function filelist_raw_clean_2 {
    local pkg sub owned
    while filelist_read_item 0 ; do
	case $filelist_tag_type in
	    dir )
# FIXME: implement and ask more files at once
		pwiz_pkgdb_what_owns "$filelist_tag_name"
# FIXME: For non install root installation, we should generate ofile, too (but can be based on mtime).
	    # If directory is owned by any installed package except this one and sub candidates, it is unowned.
		owned=true
		decho_unowned -n "$filelist_tag_name owned by"
		for pkg in "${pwiz_result[@]}" ; do
# FIXME: This is questionable, whether dir owned by our package and other one is OK.
# FIXME: By default, we consider, that it is a mistake of currently installed package.
		    decho_unowned -n " $pkg"
		    if test "$pkg" != "$pwiz_project_project" ; then
			owned=false
			for sub in "${filelist_split_candidates[@]}" ; do
			    if test "$pkg" = "$pwiz_project_project-$sub" ; then
				owned=true
				break
			    fi
			done
			if $owned ; then
			    break
			fi
		    fi
		done
# FIXME: Ignores tagext.
		if $owned ; then
		    decho_unowned "... owned"
		    echo "$filelist_tag_name dir"
		else
		    decho_unowned "... unowned"
		    echo "$filelist_tag_name odir"
		fi
		;;
	    file )
		echo "$filelist_tag_name file"
	esac
    done
}

#@ filelist_raw_open
#
# Open raw filelist file for output in stdout. Used
#by @filelist_raw_provider function.
function filelist_raw_open {
    pwiz_redirect_stdout $filelist_raw_file
}
#@ filelist_raw_close
#
# Close raw filelist file in stdout. Used by @filelist_raw_provider
#function.
function filelist_raw_close {
    pwiz_redirect_stdout_close
}

#@ filelist_raw_provider
#
# Function for init of module providing filelist_raw function.
#Function will be named @{module}_filelist_raw.
# WARNING: This function cannot be called outside module init.

#@{module}_filelist_raw
# uses $filelist_raw_file: File name of destination raw file.
#
# Function, which generates raw file list.

function filelist_raw_provider {
    filelist_raw_provider_function=${pwiz_module_current}_filelist_raw
}

# FIXME: Maybe filelist_inspect_callback can be more efficient.
# FIXME: But there can be problems with special modules, requiring whole list in time.

#@ filelist_inspect_provider
#
# Function for init of modules providing filelist_inspect function.
#Function will be named @{module}_filelist_inspect.

#@{module}_filelist_inspect
#uses $filelist_file: list file to be inspected
#uses $filelist_file_tmp: temporary file name
#
# Function, which inspects file list. it can add, remove or modify
#files in file list.

function filelist_inspect_provider {
    pwiz_phase_add_callme filelist_inspect
}

#@ filelist_install_provider
#
# Function for init of modules providing filelist_install function.
#Function will be named @{module}_filelist_install.

#@{module}_filelist_install
#uses $filelist_file: list file to be installed
#uses $filelist_file_tmp: temporary file name
#
# Function, which inspects preliminary file list during INSTALL phase.
#it can add, remove or modify files in file list.
# Example of simple inspect provider, which includes all files (valid
#for all list inspectors):
#@<
#... init
#    filelist_inspect_provider
#...
#function mymodule_filelist_inspect {
#    local name
#    filelist_read_open
#    pwiz_redirect_stdout $filelist_file_tmp
#    while filelist_read_item ; do
#	echo "$filelist_tag_name $filelist_tagline"
#    done
#    filelist_read_close
#    pwiz_redirect_stdout_close
#    mv $filelist_file_tmp $filelist_file
#}
#@>

function filelist_install_provider {
    pwiz_phase_add_callme filelist_install
}

#@ filelist_generate
#
# Generate file list on request. Clean list is generated, but no
#inspectors are called.

# FIXME: Incremental list generation can save time
function filelist_generate {
    filelist_raw
    filelist_clean
}

#@ filelist_read_open [ stream ]
# stream: stream number to be opened for read (default 3)
#
# Function opens filelist for reading in defined stream.
function filelist_read_open {
    local stream=${1:-3}
    eval exec $stream\<$filelist_file
}

#@ filelist_read_close [ stream ]
# stream: stream number to be closed (default 3)
#
# Closes defined stream.
function filelist_read_close {
    local stream=${1:-3}
    eval exec $stream\<\&-
}

#@ filelist_read_item [ stream ]
# stream: stream number from where to read item (default 3)
# returns $filelist_tag_name: list item file or directory name
# returns $filelist_tagline: part of line with all tags and type (for
#special purposes or verbatim copying)
# returns $filelist_tag_{key}: returns value of tags associated with list item
#
# Reads list item from opened stream.
# Known tags variables:
# $filelist_tag_type: type of object ("file", "dir", "read")
# $filelist_tag_attr: attributes of file in package (not permissions,
#but attributes like doc, man, noverify etc.)
# $filelist_tag_sub: subpackage
function filelist_read_item {
    local stream=${1:-3}
    local var
    if read -u$stream filelist_line ; then
	for var in ${!filelist_tag_*} ; do
	    unset $var
	done
	filelist_tagline="${filelist_line##* }"
	filelist_tag_name="${filelist_line% *}"
	filelist_tag_type="${filelist_tagline%%@*}"
	filelist_tag_attr=
	filelist_tag_sub=
	local IFS="${IFS}@"
	local tag val
	for tag in ${filelist_tagline#*@} ; do
	    val="${tag#*=}"
	    eval 'filelist_tag_'${tag%%=*}'="$val"'
	done
    else
	return 1
    fi
}

# FIXME implement function filelist_write_item

#@ filelist_split_candidate sub ...
# sub: split candidate name
#
# Suggests candidate for splitting package to subpackages.
# Purpose of this functions: In time of inspection, we don't know,
#whether such subpackage will be really created or not, but we need
#candidate name to be able to detect files in system owned by this
#package and possible subpackages.

# FIXME: split name can contain -, but shell variable not
function filelist_split_candidate {
    local sub
    for sub in "$@" ; do
	pwiz_array_add filelist_split_candidates "$sub"
    done
    eval unset filelist_split_candidate_prerequires_${sub}
    eval unset filelist_split_candidate_requires_${sub}
}

#@ filelist_split_candidate_prerequires sub what_requires
# sub: split candidate name
# what_requires: list of prerequirements
#
# Set prerequirements (i. e. packages needed for installation) of
#subpackage, if it will be created.
function filelist_split_candidate_prerequires {
    eval 'pwiz_array_add filelist_split_candidate_prerequires__'$1' "$2"'
}

#@ filelist_split_candidate_requires sub what_requires
# sub: split candidate name
# what_requires: list of requirements
#
# Set requirements (i. e. packages needed for using) of subpackage, if
#it will be created.
function filelist_split_candidate_requires {
    eval 'pwiz_array_add filelist_split_candidate_requires__'$1' "$2"'
}

# FIXME: There can be splitting package -> package + othername
# FIXME: Splitting package and splitting %post.
