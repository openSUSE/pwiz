#! /bin/bash

case $1 in
    desc )
	echo "RPM support for PWIZ"
	return
	;;
    longdesc )
	echo "This module is adds support for RPM and overwrites some default definitions."
	return
	;;
    init )
	pwiz_array_add pwiz_projectdirs_init_callback rpm_projectdirs_init_callback
	pwiz_module_needs package version unpack manual
	pwiz_module_uses filelist unpack
# FIXME: after package or after SOURCE?
	pwiz_phase_new_call rpm_setup after package
# FIXME: not used:
	pwiz_phase_new rpm_header after rpm_setup
# FIXME: move from init:
	pwiz_phase_add     PREPARE  rpm_source_main
	pwiz_phase_add_rem PREPARE  ""
	pwiz_phase_add_rem PREPARE  "%prep"
	pwiz_phase_add     PREPARE  'rpm_section=prep ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
	pwiz_phase_add_rem BUILD    ""
	pwiz_phase_add_rem BUILD    "%build"
	pwiz_phase_add     BUILD    'rpm_section=build ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
# FIXME: This should go to gnu_configure callback.
	pwiz_phase_add_run BUILD    'export CFLAGS="$RPM_OPT_FLAGS"'
	pwiz_phase_add_rem INSTALL  ""
	pwiz_phase_add_rem INSTALL  "%install"
	pwiz_phase_add     INSTALL  'rpm_section=install ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
	pwiz_phase_add_run INSTALL  'rm -rf $RPM_BUILD_ROOT'
	pwiz_phase_add_rem CLEAN    ""
	pwiz_phase_add     CLEAN    'rpm_section=clean ; cd / ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
# FIXME: non build-rooted packages
	pwiz_phase_add_rem CLEAN    "%clean"
	pwiz_phase_add_run CLEAN    'rm -rf $RPM_BUILD_ROOT'
	pwiz_phase_add_rem POSTINSTALL ""
	pwiz_phase_add_rem POSTINSTALL "%post"
# FIXME
	pwiz_phase_add     POSTINSTALL 'rpm_section=post ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd} ; cd /'
	pwiz_phase_new_call rpm_files_finish after RESULTS
	pwiz_phase_new_call rpm_files_list after rpm_files_finish

	pwiz_phase_new rpm_write after rpm_files_list
	pwiz_phase_add rpm_write rpm_set_attributes
	pwiz_phase_add rpm_write rpm_write_spec
	pwiz_phase_add rpm_write rpm_write_sources

	pwiz_phase_new rpm_test after rpm_write
	pwiz_phase_add rpm_test rpm_spec_compile

# FIXME: remove this
#	pwiz_run_wrapper_register rpm_spec_run_wrapper
	rpm_section=preamble
	rpm_files_args=
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

# FIXME: Initialize guesses here.
function rpm_setup {
    # Initialize dummy entries.
    rpm_add_preamble basic  Name         $pwiz_project_project
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_add_preamble_line basic "%define _name $package_basename"
    fi
    rpm_add_preamble basic  Version      $pwiz_project_version
    if ! test -z "$package_home_page" ; then
	rpm_add_preamble basic  URL          "$package_home_page"
    fi
    rpm_add_preamble basic  Group        "Other"
    rpm_add_preamble basic  License      "Unknown"
    rpm_add_preamble basic  Summary      "DUMMY"
    rpm_add_preamble basic  Release      0
    rpm_add_preamble ext    Autoreqprov  on
    rpm_add_preamble ext    BuildRoot    %{_tmppath}/%{name}-%{version}-build
    rpm_add_preamble_line temp "%define __check_files %{nil}"
}

# FIXME: define source list dynamically
function rpm_source_main {
    rpm_source_add main "$package_uri"
}

function rpm_files_finish {
    pwiz_phase_add_rem rpm_files_finish ""
    pwiz_phase_add_rem rpm_files_finish "%files$rpm_files_args"
}

#@ ... rpm_files_list_callback__{sub}
function rpm_files_list {
# FIXME: move to globals or other section, do not create final list, but replace dir -> systemdir
    local subpackage
    pwiz_phase_add_rem rpm_files_list "%defattr (-, root, root)"
    for callback in "${rpm_files_list_callback__[@]}" ; do
	$callback
    done
    filelist_read_open
    exec 4>$PWIZ_TMPDIR/rpm_sub_tmp
    while filelist_read_item ; do
	if test "$filelist_tag_sub" = "" ; then
	    rpm_files_create
	else
	    echo "$filelist_tag_sub" >&4
	fi
    done
    filelist_read_close
    exec 4>&-
# FIXME: This should be in general part.
    uniq <$PWIZ_TMPDIR/rpm_sub_tmp | LC_ALL=C sort -u >$PWIZ_TMPDIR/rpm_sub
    for subpackage in $(<$PWIZ_TMPDIR/rpm_sub) ; do
	rpm_subpackage_add "$subpackage"
	pwiz_phase_add_rem rpm_files_list ""
# FIXME: support rpm_files_args
	pwiz_phase_add_rem rpm_files_list "%files $subpackage"
	pwiz_phase_add_rem rpm_files_list "%defattr (-, root, root)"
# FIXME: callback name conversion debug-info -> debug_info
	eval 'for callback in "${rpm_files_list_callback__'$subpackage'[@]}" ; do
	    $callback
	done'
# FIXME: Make it tagged and configurable!
	filelist_read_open
	while filelist_read_item ; do
	    if test "$filelist_tag_sub" = "$subpackage" ; then
		rpm_files_create
	    fi
	done
	filelist_read_close
    done
}

# FIXME: zip archives etc.
# FIXME: Ask for directory and not try it.
function unpack_prepare {
#    mkdir $PWIZ_TMPDIR/rpm_unpack
#    cd $PWIZ_TMPDIR/rpm_unpack
#    $unpack_seq "$PWIZ_SOURCESDIR/$pwiz_project_project/${package_uri##*/}"
#    pwiz_exec unpack search_dirname
#    cd -
#    rm -rf $PWIZ_TMPDIR/rpm_unpack
# FIXME:
    rpm_setup_args=
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_setup_args="$rpm_setup_args -n %{_name}-%{version}"
    fi
    pwiz_phase_add_run unpack "%setup$rpm_setup_args"
# FIXME: probably obsolete
#    pwiz_phase_add     unpack 'rpm_section=prep_after_setup'
}

# FIXME: This wrapper is obsolete (maybe will be used for %post in future).
function rpm_run_wrapper {
# FIXME: Not complete
    expanded="$(rpm -E "%define name $pwiz_project_project
%define version $pwiz_project_version
%define setup $unpack_seq $PWIZ_SOURCESDIR/${package_uri##*/} ; cd %{name}-%{version}
$*")"
    echo "*** RPM expanded: $expanded"
    eval pwiz_run_wrap "$expanded"
}

# redefinition of run wrapper core
function pwiz_run_core {
# FIXME: to pwiz_run_prepare
# FIXME: Flexible %setup
# FIXME: %post etc.
    case $rpm_section in
	prep )
	    rpm_create_dummy_spec -bp prep false "$@"
	    ;;
# FIXME: probably obsolete
#	prep_after_setup )
#	    rpm_create_dummy_spec -bp prep false "$@"
#	    ;;
	build )
	    rpm_create_dummy_spec "-bc --short-circuit" build true "$@"
	    ;;
# NOTE: rpmbuild has no support for calling clean
# FIXME: This is not OK for %post. It has different environment.
	install | clean | post )
	    rpm_create_dummy_spec "-bi --short-circuit" install true "$@"
	    ;;
	* )
	    pwiz_fatal "Unimplemented RPM section"
	    ;;
    esac
    cd $PWIZ_SOURCESDIR
    rpmbuild $rpm_build_arg $PWIZ_TMPDIR/rpm_tmp.spec
    if test -f $PWIZ_TMPDIR/rpm_pwd ; then
	cd "$(<$PWIZ_TMPDIR/rpm_pwd)"
    fi
    pwiz_set_rc $pwiz_run_rc
}

#@ rpm_create_dummy_spec rpm_build_arg section add_setup "$@"
function rpm_create_dummy_spec {
    rpm_build_arg="$1"
    pwiz_redirect_stdout $PWIZ_TMPDIR/rpm_tmp.spec
    rpm_write_spec_preamble

    echo "%prep"
    if $3 ; then
	echo "%setup$rpm_setup_args"
    fi
    if test $2 != prep ; then
	echo -e "\n%$2"
    fi
    shift 3
# FIXME: replace $* by $1 in future
# FIXME: setting of POSIXLY_CORRECT in userspace does not yet work
    echo \
'if test -f '$PWIZ_TMPDIR/rpm_env' ; then
    set +x
    cd "$(<'$PWIZ_TMPDIR/rpm_pwd')"
    . '$PWIZ_TMPDIR/rpm_env' 2>/dev/null
    eval "$(exec <'$PWIZ_TMPDIR/rpm_shopt$' ; while read ; do if test "${REPLY##*\t}" = on ; then echo "shopt -s ${REPLY%%\t*}" ; else echo "shopt -u ${REPLY%%\t*}" ; fi ; done)"''
    eval "$(exec <'$PWIZ_TMPDIR/rpm_set_o$' ; while read ; do if test "${REPLY##*\t}" = on ; then echo "set -o ${REPLY%%\t*}" ; else echo "set +o ${REPLY%%\t*}" ; fi ; done)"''
fi
'"$*"'
set -o >'$PWIZ_TMPDIR/rpm_set_o'
set +x
shopt >'$PWIZ_TMPDIR/rpm_shopt'
unset POSIXLY_CORRECT
echo -e "set +o posix\nset +o errexit" >'$PWIZ_TMPDIR/rpm_env'
export >>'$PWIZ_TMPDIR/rpm_env'
set >>'$PWIZ_TMPDIR/rpm_env'
echo "$PWD" >'$PWIZ_TMPDIR/rpm_pwd
    pwiz_redirect_stdout_close
}
# FIXME ^ save set unparsed to separate file, and parse if required. Use set +x for parsing.

function rpm_projectdirs_init_callback {
    PWIZ_SOURCESDIR=/usr/src/packages/SOURCES
    PWIZ_SRCDIR=/usr/src/packages/BUILD
    PWIZ_BUILDDIR=/usr/src/packages/BUILD
    PWIZ_INSTALLROOT=/var/tmp/$pwiz_project_project-$pwiz_project_version-build
}

#@ rpm_subst "string"
#@ substitute %{name}, %{_name}, %{version}
#@ FIXME: implement and substitute %{_name}
#@ BIG FIXME: crashes for packages with "name" and "version" in package name
#@ Returns: $pwiz_result
#@ FIXME: should be part of pwiz_add_run
function rpm_subst_names {
    pwiz_result="$1"
    pwiz_result=${pwiz_result//$pwiz_project_project/%\{name\}}
    if test "$package_basename" != "$pwiz_project_project" ; then
	pwiz_result=${pwiz_result//$package_basename/%\{_name\}}
    fi
    pwiz_result=${pwiz_result//$pwiz_project_version/%\{version\}}
}

#@ rpm_files_create (no args) (internal)
function rpm_files_create {
    local item_prefix
    if test "$filelist_tag_cat" = doc ; then
	item_prefix="%doc "
    else
	item_prefix=""
    fi
    case $filelist_tag_type in
	file )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix$filelist_tag_name"
	    ;;
	dir )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix%dir $filelist_tag_name"
	    ;;
	odir | ofile )
	    ;;
	glob )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix$filelist_tag_name"
	    ;;
	* )
	    pwiz_fatal "unknown item attribute $filelist_tag_type"
	    ;;
    esac
}

# rpm_subpackage_add subpackage
function rpm_subpackage_add {
    pwiz_array_add rpm_subpackage_list "$1"
    rpm_add_preamble basic  Group        "Other" $subpackage
    rpm_add_preamble basic  Summary      "DUMMY" $subpackage
}
# FIXME: declare -a ?
unset rpm_subpackage_list

#@ RPM preambles:
# There are following types of preamble:
# basic: Basic, required preambles. These are reset and set to real values before spec file finalizing.
# FIXME: delete this comment: sourcepatch: Source* and Patch* list (internal)
# ext: extended preambles.
# temp: These are throw away before finalizing.

# rpm_add_preamble_line type line subpackage
function rpm_add_preamble_line {
    pwiz_array_add rpm_preamble__$1_$3 "$2"
}

# rpm_add_preamble type atribute value subpackage
function rpm_add_preamble {
    local pad='              '
    rpm_add_preamble_line $1 "$2: ${pad:${#2}+3}$3" "$4"
}

# rpm_add_description description subpackage
function rpm_add_description {
    eval 'rpm_description__'$2'="$1"'
}

function rpm_set_attributes {
    # FIXME: Extract these attributes from spec file, if it exists, either old one or bundled.
    local subpackage

    unset rpm_preamble__basic_
    unset rpm_preamble__temp_
    rpm_add_preamble basic  Name         $pwiz_project_project
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_add_preamble_line basic "%define _name $package_basename"
    fi
    rpm_add_preamble basic  Version      $pwiz_project_version
    pwiz_ask_string "Enter RPM group for main package." \
	"RPM requires assigning group attribute for any package created. You should select one of the list." \
	q=rpm_group__ default=Other p=0
    rpm_group__="$pwiz_answer"
    rpm_add_preamble basic  Group        "$rpm_group__"
    pwiz_ask_string "Enter RPM license for main package." \
	"RPM requires assigning license attribute for any package created. You should select one of the list." \
	q=rpm_license default=Unknown p=0
    rpm_license="$pwiz_answer"
    rpm_add_preamble basic  License      "$rpm_license"
    rpm_add_preamble basic  Release      0
    pwiz_ask_string "Enter RPM summary for main package." \
	"RPM requires assigning one-line summary attribute for any package created. You should now write any." \
	q=rpm_summary__
    rpm_summary__="$pwiz_answer"
    rpm_add_preamble basic  Summary      "$rpm_summary__"
    pwiz_ask_string "Enter RPM prerequires for main package." \
	"RPM prerequires are packages required for installing this package." q=rpm_prereq__ default="" p=20
    if ! test -z "$pwiz_answer" ; then
	rpm_add_preamble ext    PreReq       "$pwiz_answer"
    fi
    pwiz_ask_string "Enter RPM requires for main package." \
	"RPM requires are packages required for using this package." q=rpm_requires__ default="" p=20
    if ! test -z "$pwiz_answer" ; then
	rpm_add_preamble ext    Requires     "$pwiz_answer"
    fi
    pwiz_ask_string "Enter RPM description for main package." \
	"RPM requires assigning multiple line description attribute for any package created. You should now write any." \
	multiline=true q=rpm_description__ default= p=0
    rpm_description__="$pwiz_answer"
    rpm_add_description           "$rpm_description__"

    for subpackage in "${rpm_subpackage_list[@]}" ; do
    unset rpm_preamble__basic_$subpackage
    unset rpm_preamble__temp_$subpackage
# FIXME:
	pwiz_ask_string "Enter RPM group for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning group attribute for subpackage $subpackage. You should select one of the list." \
	    q=rpm_group__$subpackage default="$rpm_group__" p=20
	rpm_add_preamble basic  Group        "$pwiz_answer" $subpackage
	pwiz_ask_string "Enter RPM summary for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning one-line summary for subpackage $subpackage. You should now write any." \
	    q=rpm_summary__$subpackage default="$rpm_summary__" p=20
	rpm_add_preamble basic  Summary      "$pwiz_answer" $subpackage
	pwiz_ask_string "Enter RPM prerequires for subpackage $subpackage." \
	    "RPM prerequires are packages required for installing this subpackage." q=rpm_prereq__$subpackage default="" p=20
	if ! test -z "$pwiz_answer" ; then
	    rpm_add_preamble ext    PreReq       "$pwiz_answer"
	fi
	pwiz_ask_string "Enter RPM requires for subpackage $subpackage." \
	    "RPM requires are packages required for using this subpackage." q=rpm_requires__$subpackage default="" p=20
	if ! test -z "$pwiz_answer" ; then
	    rpm_add_preamble ext    Requires     "$pwiz_answer"
	fi
	pwiz_ask_string "Enter RPM description for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning multiple line description attribute for any package created. You should now write any." \
	    multiline=true q=rpm_description__ default="$rpm_description__" p=0
	rpm_add_description           "$pwiz_answer" $subpackage
    done
}
# Dummy items for temporary spec files.
rpm_group__=DUMMY
rpm_license=DUMMY
rpm_summary__=DUMMY

# rpm_write_spec_preamble
# Writes spec preamble to stdout.
function rpm_write_spec_preamble {
    local subpackage i subsection string
    local pad='              '
    for subpackage in "" "${rpm_subpackage_list[@]}" ; do
	if ! test -z "$subpackage" ; then
	    echo ""
	    echo "%package $subpackage"
	fi
# FIXME: if will not be needed, remove for cycle
	for subsection in basic ; do
	    eval "for string in \"\${rpm_preamble__${subsection}_$subpackage[@]}\" ; do
		echo \"\$string\"
	    done"
	done
	for (( i=0 ; i < ${#rpm_sources[@]} ; i++ )) ; do
	    if test $i = 0 ; then
		string=Source
	    else
		string=Source$i
	    fi
	    echo "$string: ${pad:${#string}+3}${rpm_sources[i]}"
	done
	for (( i=0 ; i < ${#rpm_patches[@]} ; i++ )) ; do
	    if test $i = 0 ; then
		string=Patch
	    else
		string=Patch$i
	    fi
	    echo "$string: ${pad:${#string}+3}${rpm_patches[i]}"
	done
	for subsection in ext temp ; do
	    eval "for string in \"\${rpm_preamble__${subsection}_$subpackage[@]}\" ; do
		echo \"\$string\"
	    done"
	done
	echo ""
	echo "%description${subpackage:+ $subpackage}"
	eval echo \"\$rpm_description__$subpackage\"
    done
}

# rpm_write_spec_body
# Writes spec body to stdout.
function rpm_write_spec_body {
    pwiz_phase_save
    pwiz_phase_reset
    while pwiz_step query ; do
	case "$pwiz_result" in
	    "pwiz_run "* )
		echo "${pwiz_result#pwiz_run }"
		;;
	    "pwiz_rem "* )
		echo "${pwiz_result#pwiz_rem }"
		;;
# FIXME: will be removed
	    "pwiz_run_eval "* | "pwiz_rem_eval "* )
		eval echo \"\${PWIZ_STAGE_EVAL_$PWIZ_PHASE_CURRENT\[$PWIZ_STAGE_CURRENT\]}\"
	    ;;
	esac
    done
    pwiz_phase_restore
}

# rpm_write_spec
# Writes complete spec to $PWIZ_RESULTDIR.
function rpm_write_spec {
    rm -f $PWIZ_RESULTDIR/$pwiz_project_project.spec
    pwiz_redirect_stdout $PWIZ_RESULTDIR/$pwiz_project_project.spec
    echo "# *** This file is generated by PWIZ. Do not edit by hand. ***"
    rpm_write_spec_preamble
    rpm_write_spec_body
    pwiz_redirect_stdout_close
}

# rpm_write_sources
# Copies sources to resultdir.
function rpm_write_sources {
    cp -a $PWIZ_SOURCESDIR/* $PWIZ_RESULTDIR
}

# rpm_spec_compile
# Compile RPM package from spec file.
# FIXME: don't hardwire paths
function rpm_spec_compile {
    local subpackage
    cd $PWIZ_RESULTDIR
    rpmbuild -ba $pwiz_project_project.spec
    cp -a /usr/src/packages/RPMS/*/$pwiz_project_project-[0-9]* .
    cp -a /usr/src/packages/SRPMS/$pwiz_project_project-[0-9]* .
    for subpackage in $(<$PWIZ_TMPDIR/rpm_sub) ; do
	cp -a /usr/src/packages/RPMS/*/$pwiz_project_project-$subpackage-[0-9]* .
    done
}


# FIXME: rpm should auto-ask for splitted package args, if none are supported.

function rpm_manual_source {
    local id
# FIXME: After chaning ask_list callback interface, fix it to allow to ask in time of adding ID.
    pwiz_ask_list "Extra RPM sources needed in this point." "Now you can manage extra sources needed in this point of work." q=rpm_manual_source_$1 item_type=none
    for id in $pwiz_answer ; do
	rpm_source "$1" "$id"
    done
}

#@ rpm_manual_source_wizard action_id source_id
function rpm_source {
# FIXME: can be URL. Write an URL specifier.
# FIXME: Maybe use answer variables instead of new ones.
    pwiz_ask_string "Enter source $2 name." "Enter here source name for source id $2. File itself must be copied to $PWIZ_RESULTDIR." q=rpm_source__$1__$2
    rpm_source_add $2 "$pwiz_answer"
    local sourcename=$pwiz_answer
# FIXME: Ask for source description string.
    cp -a $PWIZ_RESULTDIR/$pwiz_answer $PWIZ_SOURCESDIR
    local -a addons
    if test "$PWIZ_PHASE_CURRENT" = manual_PREPARE_PREUNPACK ; then
	addons=( "default[2]=\"@setup@-b#\"" "p[2]=0" "string[2]=\"unpack during %setup before changing directory\"" "default[3]=\"@setup@-a#\"" "p[3]=10" "string[3]=\"unpack during %setup after changing directory\"" )
    fi
    pwiz_ask_string "What do you want to do with this source (\"#\" is source number)." "Because RPM sources and patches in PWIZ are ID based, you need to enter eventual commands here. Use \"#\" instead of source number and ## instead of #." default[0]="@cp@%{S:#}" p[0]=10 string[0]="copy to actual directory" default[1]="@cpi@%{S:#}" p[1]=20 string[1]="copy to actual directory and install later" "${addons[@]}" q=rpm_source_name__$1__$2
    eval local sourceno\=\$rpm_sourceno__$2
    local sourcestring=${pwiz_answer//\\#\\#/@@rpm_crosshash@@}
    sourcestring=${sourcestring//\\#/$sourceno}
    sourcestring=${sourcestring//@@rpm_crosshash@@/#}
    case $sourcestring in
	@setup@* )
	    rpm_setup_args="$rpm_setup_args ${sourcestring#@setup@}"
	    ;;
	@cp@* )
# FIXME: pwiz_string_escape
	    rpm_source_cp_args="$rpm_source_cp_args ${sourcestring#@cp@}"
	    ;;
	@cpi@* )
# FIXME: pwiz_string_escape
	    rpm_source_cp_args="$rpm_source_cp_args ${sourcestring#@cpi@}"
	    pwiz_ask_string "Enter RPM destination of file $sourcename" "Now you should enter location of file in final RPM. Do not use build root paths." q=rpm_source_dest__$1__$2
# FIXME: pwiz_string_escape
	    pwiz_phase_add rpm_source_dest_check "rpm_source_dest_check $1 $2 \"$sourcename\" \"$pwiz_answer\""
	    ;;
	* )
	    pwiz_phase_add_run $1 "$sourcestring"
	    ;;
    esac
}

#@ rpm_source_cp_check manual_id (internal)
# Copy extra sources, all at once.
function rpm_source_cp_check {
    if ! test -z "$rpm_source_cp_args" ; then
# FIXME: pwiz_string_escape
	    pwiz_phase_add_run $1 "cp -a$rpm_source_cp_args ."
    fi
    rpm_source_cp_args=
}
rpm_source_cp_args=

#@ rpm_source_dest_check manual_id source_id source_filename dest_filename (internal)
# Check build root and generate proper commands.
function rpm_source_dest_check {
    if ! test -d "$RPM_BUILD_ROOT${4%/*}" ; then
	mkdir -p "$RPM_BUILD_ROOT${4%/*}"
# FIXME: pwiz_string_escape
	biarch_replace "$4"
	pwiz_phase_add_run rpm_source_dest_mkdir "mkdir -p \\$RPM_BUILD_ROOT${pwiz_result%/*}"
	pwiz_phase_add_run rpm_source_dest_cp "cp $3 \\$RPM_BUILD_ROOT$pwiz_result"
    fi
}
pwiz_phase_new rpm_source_dest_check after INSTALL_POSTACTION
pwiz_phase_new rpm_source_dest_mkdir after rpm_source_dest_check
pwiz_phase_new rpm_source_dest_cp after rpm_source_dest_mkdir

# rpm_source_add id name
function rpm_source_add {
    eval "rpm_sourceno__$1=${#rpm_sources[@]}"
    rpm_subst_names "$2"
    pwiz_array_add rpm_sources "$pwiz_result"
}

function rpm_manual_patch {
    local id
# FIXME: After chaning ask_list callback interface, fix it to allow to ask in time of adding ID.
    pwiz_ask_list "Extra RPM patches needed in this point." "Now you can manage extra patches needed in this point of work." q=rpm_manual_patch_$1 item_type=none
    for id in "${pwiz_answer[@]}" ; do
	rpm_patch "$1" "$id"
    done
}

#@ rpm_manual_patch_wizard action_id patch_id
function rpm_patch {
# FIXME: can be URL. Write an URL specifier.
# FIXME: Maybe use answer variables instead of new ones.
    pwiz_ask_string "Enter patch $2 name." "Enter here patch name for patch id $2. File itself must be copied to $PWIZ_RESULTDIR." q=rpm_patch__$1__$2
    rpm_patch_add $2 "$pwiz_answer"
# FIXME: Ask for patch description string.
    cp -a $PWIZ_RESULTDIR/$pwiz_answer $PWIZ_SOURCESDIR
    local -a addons
    pwiz_ask_string "What do you want to do with this patch (\"#\" is patch number)." "Because RPM patches and patches in PWIZ are ID based, you need to enter eventual commands here. Use \"#\" instead of patch number and ## instead of #." default[0]="@patch@%patch#" p[0]=30 string[0]="apply patch" q=rpm_patch_name__$1__$2
    eval local patchno\=\$rpm_patchno__$2
    pwiz_answer=${pwiz_answer//\\#\\#/@@rpm_crosshash@@}
    pwiz_answer=${pwiz_answer//\\#/$patchno}
    pwiz_answer=${pwiz_answer//@@rpm_crosshash@@/#}
    local patchcmd="$pwiz_answer"
    case $pwiz_answer in
	@patch@* )
	    pwiz_ask_string "Enter arguments of %patch." "You should %patch arguments. It can be, for example \"-p1\"" default[0]="" p[0]=20 default[1]="-p1" p[1]=10
	    pwiz_phase_add_run $1 "${patchcmd#@patch@}${pwiz_answer:+ $pwiz_answer}"
	    ;;
	* )
	    pwiz_phase_add_run $1 "$pwiz_answer"
	    ;;
    esac
}

# rpm_patch_add id name
function rpm_patch_add {
    eval "rpm_patchno__$1=${#rpm_patches[@]}"
    rpm_subst_names "$2"
    pwiz_array_add rpm_patches "$pwiz_result"
}

for rpm_tmp_phase in PREPARE_PREUNPACK PREPARE_POSTUNPACK PREPARE_RECHECK ; do
    manual_action_add $rpm_tmp_phase rpm_manual_source "manage extra RPM sources"
    pwiz_phase_new rpm_source_cp_$rpm_tmp_phase after manual_$rpm_tmp_phase
    pwiz_phase_add rpm_source_cp_$rpm_tmp_phase "rpm_source_cp_check $rpm_tmp_phase"
done
unset rpm_tmp_phase

manual_action_add PREPARE_POSTUNPACK rpm_manual_patch  "manage enhancement RPM patches"

manual_action_add PREPARE_RECHECK rpm_manual_patch  "manage bugfix RPM patches"


# FIXME: be able to add additional source late during install and send event back
