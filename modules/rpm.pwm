#! /bin/bash

case $1 in
    desc )
	echo "RPM support for PWIZ"
	return
	;;
    longdesc )
	echo "This module is adds support for RPM and overwrites some default definitions."
	return
	;;
    init )
	pwiz_array_add pwiz_projectdirs_init_callback rpm_projectdirs_init_callback
	pwiz_module_needs package version unpack
	pwiz_module_uses filelist unpack
# FIXME: after package or after SOURCE?
	pwiz_phase_new_call rpm_setup after package
# FIXME: not used:
	pwiz_phase_new rpm_header after rpm_setup
# FIXME: move from init:
	pwiz_phase_add     PREPARE  rpm_source
	pwiz_phase_add_rem PREPARE  ""
	pwiz_phase_add_rem PREPARE  "%prep"
	pwiz_phase_add     PREPARE  'rpm_section=prep ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
	pwiz_phase_add_rem BUILD    ""
	pwiz_phase_add_rem BUILD    "%build"
	pwiz_phase_add     BUILD    'rpm_section=build ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
# FIXME: This should go to gnu_configure callback.
	pwiz_phase_add_run BUILD    'export CFLAGS="$RPM_OPT_FLAGS"'
	pwiz_phase_add_rem INSTALL  ""
	pwiz_phase_add_rem INSTALL  "%install"
	pwiz_phase_add     INSTALL  'rpm_section=install ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
	pwiz_phase_add_run INSTALL  'rm -rf $RPM_BUILD_ROOT'
	pwiz_phase_add_rem CLEAN    ""
	pwiz_phase_add     CLEAN    'rpm_section=clean ; cd / ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd}'
# FIXME: non build-rooted packages
	pwiz_phase_add_rem CLEAN    "%clean"
	pwiz_phase_add_run CLEAN    'rm -rf $RPM_BUILD_ROOT'
	pwiz_phase_add_rem POSTINSTALL ""
	pwiz_phase_add_rem POSTINSTALL "%post"
# FIXME
	pwiz_phase_add     POSTINSTALL 'rpm_section=post ; rm -f $PWIZ_TMPDIR/rpm_{env,pwd} ; cd /'
	pwiz_phase_new_call rpm_files_finish after RESULTS
	pwiz_phase_new_call rpm_files_list after rpm_files_finish

	pwiz_phase_new rpm_write after rpm_files_list
	pwiz_phase_add rpm_write rpm_set_attributes
	pwiz_phase_add rpm_write rpm_write_spec
	pwiz_phase_add rpm_write rpm_write_sources

	pwiz_phase_new rpm_test after rpm_write
	pwiz_phase_add rpm_test rpm_spec_compile

# FIXME: remove this
#	pwiz_run_wrapper_register rpm_spec_run_wrapper
	rpm_section=preamble
	rpm_files_args=
	;;
    version )
	echo "0.1"
	return
	;;
    * )
	return
	;;
esac

# FIXME: Initialize guesses here.
function rpm_setup {
    # Initialize dummy entries.
    rpm_add_preamble basic  Name         $pwiz_project_project
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_add_preamble_line basic "%define _name $package_basename"
    fi
    rpm_add_preamble basic  Version      $pwiz_project_version
    rpm_add_preamble basic  Group        "Other"
    rpm_add_preamble basic  License      "Unknown"
    rpm_add_preamble basic  Summary      "DUMMY"
    rpm_add_preamble basic  Release      0
    rpm_add_preamble ext    BuildRoot    %{_tmppath}/%{name}-%{version}-build
    rpm_add_preamble_line temp "%define __check_files %{nil}"
}

# FIXME: define source list dynamically
function rpm_source {
    rpm_subst_names "$package_uri"
    rpm_add_preamble source Source       $pwiz_result
}

function rpm_files_finish {
    pwiz_phase_add_rem rpm_files_finish ""
    pwiz_phase_add_rem rpm_files_finish "%files$rpm_files_args"
}

#@ ... rpm_files_list_callback__{sub}
function rpm_files_list {
# FIXME: move to globals or other section, do not create final list, but replace dir -> systemdir
    local subpackage
    pwiz_phase_add_rem rpm_files_list "%defattr (-, root, root)"
    for callback in "${rpm_files_list_callback__[@]}" ; do
	$callback
    done
    filelist_read_open
    exec 4>$PWIZ_TMPDIR/rpm_sub_tmp
    while filelist_read_item ; do
	if test "$filelist_tag_sub" = "" ; then
	    rpm_files_create
	else
	    echo "$filelist_tag_sub" >&4
	fi
    done
    filelist_read_close
    exec 4>&-
# FIXME: This should be in general part.
    uniq <$PWIZ_TMPDIR/rpm_sub_tmp | LC_ALL=C sort -u >$PWIZ_TMPDIR/rpm_sub
    for subpackage in $(<$PWIZ_TMPDIR/rpm_sub) ; do
	rpm_subpackage_add "$subpackage"
	pwiz_phase_add_rem rpm_files_list ""
# FIXME: support rpm_files_args
	pwiz_phase_add_rem rpm_files_list "%files $subpackage"
	pwiz_phase_add_rem rpm_files_list "%defattr (-, root, root)"
# FIXME: callback name conversion debug-info -> debug_info
	eval 'for callback in "${rpm_files_list_callback__'$subpackage'[@]}" ; do
	    $callback
	done'
# FIXME: Make it tagged and configurable!
	filelist_read_open
	while filelist_read_item ; do
	    if test "$filelist_tag_sub" = "$subpackage" ; then
		rpm_files_create
	    fi
	done
	filelist_read_close
    done
}

# FIXME: zip archives etc.
# FIXME: Ask for directory and not try it.
function unpack_prepare {
#    mkdir $PWIZ_TMPDIR/rpm_unpack
#    cd $PWIZ_TMPDIR/rpm_unpack
#    $unpack_seq "$PWIZ_SOURCESDIR/$pwiz_project_project/${package_uri##*/}"
#    pwiz_exec unpack search_dirname
#    cd -
#    rm -rf $PWIZ_TMPDIR/rpm_unpack
# FIXME:
    rpm_setup_args=
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_setup_args=' -n %{_name}-%{version}'
    fi
    pwiz_phase_add_run unpack "%setup$rpm_setup_args"
# FIXME: probably obsolete
#    pwiz_phase_add     unpack 'rpm_section=prep_after_setup'
}

# FIXME: This wrapper is obsolete (maybe will be used for %post in future).
function rpm_run_wrapper {
# FIXME: Not complete
    expanded="$(rpm -E "%define name $pwiz_project_project
%define version $pwiz_project_version
%define setup $unpack_seq $PWIZ_SOURCESDIR/${package_uri##*/} ; cd %{name}-%{version}
$*")"
    echo "*** RPM expanded: $expanded"
    eval pwiz_run_wrap "$expanded"
}

# redefinition of run wrapper core
function pwiz_run_core {
# FIXME: to pwiz_run_prepare
# FIXME: Flexible %setup
# FIXME: %post etc.
    case $rpm_section in
	prep )
	    rpm_create_dummy_spec -bp prep false "$@"
	    ;;
# FIXME: probably obsolete
#	prep_after_setup )
#	    rpm_create_dummy_spec -bp prep false "$@"
#	    ;;
	build )
	    rpm_create_dummy_spec "-bc --short-circuit" build true "$@"
	    ;;
# NOTE: rpmbuild has no support for calling clean
# FIXME: This is not OK for %post. It has different environment.
	install | clean | post )
	    rpm_create_dummy_spec "-bi --short-circuit" install true "$@"
	    ;;
	* )
	    pwiz_fatal "Unimplemented RPM section"
	    ;;
    esac
    cd $PWIZ_SOURCESDIR
    rpmbuild $rpm_build_arg $PWIZ_TMPDIR/rpm_tmp.spec
    if test -f $PWIZ_TMPDIR/rpm_pwd ; then
	cd "$(<$PWIZ_TMPDIR/rpm_pwd)"
    fi
    pwiz_set_rc $pwiz_run_rc
}

#@ rpm_create_dummy_spec rpm_build_arg section add_setup "$@"
function rpm_create_dummy_spec {
    rpm_build_arg="$1"
    pwiz_redirect_stdout $PWIZ_TMPDIR/rpm_tmp.spec
    rpm_write_spec_preamble

    echo "%prep"
    if $3 ; then
	echo "%setup$rpm_setup_args"
    fi
    if test $2 != prep ; then
	echo -e "\n%$2"
    fi
    shift 3
# FIXME: replace $* by $1 in future
# FIXME: setting of POSIXLY_CORRECT in userspace does not yet work
    echo \
'if test -f '$PWIZ_TMPDIR/rpm_env' ; then
    set +x
    cd "$(<'$PWIZ_TMPDIR/rpm_pwd')"
    . '$PWIZ_TMPDIR/rpm_env' 2>/dev/null
    eval "$(exec <'$PWIZ_TMPDIR/rpm_shopt$' ; while read ; do if test "${REPLY##*\t}" = on ; then echo "shopt -s ${REPLY%%\t*}" ; else echo "shopt -u ${REPLY%%\t*}" ; fi ; done)"''
    eval "$(exec <'$PWIZ_TMPDIR/rpm_set_o$' ; while read ; do if test "${REPLY##*\t}" = on ; then echo "set -o ${REPLY%%\t*}" ; else echo "set +o ${REPLY%%\t*}" ; fi ; done)"''
fi
'"$*"'
set -o >'$PWIZ_TMPDIR/rpm_set_o'
set +x
shopt >'$PWIZ_TMPDIR/rpm_shopt'
unset POSIXLY_CORRECT
echo -e "set +o posix\nset +o errexit" >'$PWIZ_TMPDIR/rpm_env'
export >>'$PWIZ_TMPDIR/rpm_env'
set >>'$PWIZ_TMPDIR/rpm_env'
echo "$PWD" >'$PWIZ_TMPDIR/rpm_pwd
    pwiz_redirect_stdout_close
}
# FIXME ^ save set unparsed to separate file, and parse if required. Use set +x for parsing.

function rpm_projectdirs_init_callback {
    PWIZ_SOURCESDIR=/usr/src/packages/SOURCES
    PWIZ_SRCDIR=/usr/src/packages/BUILD
    PWIZ_BUILDDIR=/usr/src/packages/BUILD
    PWIZ_INSTALLROOT=/var/tmp/$pwiz_project_project-$pwiz_project_version-build
}

#@ rpm_subst "string"
#@ substitute %{name}, %{_name}, %{version}
#@ FIXME: implement and substitute %{_name}
#@ BIG FIXME: crashes for packages with "name" and "version" in package name
#@ Returns: $pwiz_result
#@ FIXME: should be part of pwiz_add_run
function rpm_subst_names {
    pwiz_result="$1"
    pwiz_result=${pwiz_result//$pwiz_project_project/%\{name\}}
    if test "$package_basename" != "$pwiz_project_project" ; then
	pwiz_result=${pwiz_result//$package_basename/%\{_name\}}
    fi
    pwiz_result=${pwiz_result//$pwiz_project_version/%\{version\}}
}

#@ rpm_files_create (no args) (internal)
function rpm_files_create {
    local item_prefix
    if test "$filelist_tag_cat" = doc ; then
	item_prefix="%doc "
    else
	item_prefix=""
    fi
    case $filelist_tag_type in
	file )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix$filelist_tag_name"
	    ;;
	dir )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix%dir $filelist_tag_name"
	    ;;
	odir | ofile )
	    ;;
	glob )
	    pwiz_phase_add_rem rpm_files_list "$item_prefix$filelist_tag_name"
	    ;;
	* )
	    pwiz_fatal "unknown item attribute $filelist_tag_type"
	    ;;
    esac
}

# rpm_subpackage_add subpackage
function rpm_subpackage_add {
    pwiz_array_add rpm_subpackage_list "$1"
    rpm_add_preamble basic  Group        "Other" $subpackage
    rpm_add_preamble basic  Summary      "DUMMY" $subpackage
}
# FIXME: declare -a ?
unset rpm_subpackage_list

#@ RPM preambles:
# There are following types of preamble:
# basic: Basic, required preambles. These are reset and set to real values before spec file finalizing.
# source: Source* list (only main package)
# patch: Patch* list (only main package)
# ext: extended preambles.
# temp: These are throw away before finalizing.

# rpm_add_preamble_line type line subpackage
function rpm_add_preamble_line {
    pwiz_array_add rpm_preamble__$1_$3 "$2"
}

# rpm_add_preamble type atribute value subpackage
function rpm_add_preamble {
    local pad='              '
    rpm_add_preamble_line $1 "$2: ${pad:${#2}+3}$3" "$4"
}

# rpm_add_description description subpackage
function rpm_add_description {
    eval 'rpm_description__'$2'="$1"'
}

function rpm_set_attributes {
    # FIXME: Extract these attributes from spec file, if it exists, either old one or bundled.
    local subpackage

    unset rpm_preamble__basic_
    unset rpm_preamble__temp_
    rpm_add_preamble basic  Name         $pwiz_project_project
    if test "$package_basename" != "$pwiz_project_project" ; then
	rpm_add_preamble_line basic "%define _name $package_basename"
    fi
    rpm_add_preamble basic  Version      $pwiz_project_version
    pwiz_ask_string "Enter RPM group for main package." \
	"RPM requires assigning group attribute for any package created. You should select one of the list." \
	q=rpm_group__ default=Other p=0
    rpm_group__="$pwiz_answer"
    rpm_add_preamble basic  Group        "$rpm_group__"
    pwiz_ask_string "Enter RPM license for main package." \
	"RPM requires assigning license attribute for any package created. You should select one of the list." \
	q=rpm_license default=Unknown p=0
    rpm_license="$pwiz_answer"
    rpm_add_preamble basic  License      "$rpm_license"
    rpm_add_preamble basic  Release      0
    pwiz_ask_string "Enter RPM summary for main package." \
	"RPM requires assigning one-line summary attribute for any package created. You should now write any." \
	q=rpm_summary__
    rpm_summary__="$pwiz_answer"
    rpm_add_preamble basic  Summary      "$rpm_summary__"
    pwiz_ask_string "Enter RPM description for main package." \
	"RPM requires assigning multiple line description attribute for any package created. You should now write any." \
	q=rpm_description__ default= p=0
    rpm_description__="$pwiz_answer"
    rpm_add_description           "$rpm_description__"

    for subpackage in "${rpm_subpackage_list[@]}" ; do
    unset rpm_preamble__basic_$subpackage
    unset rpm_preamble__temp_$subpackage
# FIXME:
	pwiz_ask_string "Enter RPM group for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning group attribute for subpackage $subpackage. You should select one of the list." \
	    q=rpm_group__$subpackage default="$rpm_group__" p=20
	rpm_add_preamble basic  Group        "$pwiz_answer" $subpackage
	pwiz_ask_string "Enter RPM summary for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning one-line summary for subpackage $subpackage. You should now write any." \
	    q=rpm_summary__$subpackage default="$rpm_summary__" p=20
	rpm_add_preamble basic  Summary      "$pwiz_answer" $subpackage
	pwiz_ask_string "Enter RPM description for subpackage $subpackage." \
	    "PWIZ decided to split binary RPM. It requires assigning multiple line description attribute for any package created. You should now write any." \
	    q=rpm_description__ default="$rpm_description__" p=0
	rpm_add_description           "$pwiz_answer" $subpackage
    done
}
# Dummy items for temporary spec files.
rpm_group__=DUMMY
rpm_license=DUMMY
rpm_summary__=DUMMY

# rpm_write_spec_preamble
# Writes spec preamble to stdout.
function rpm_write_spec_preamble {
    local subpackage subsection string
    for subpackage in "" "${rpm_subpackage_list[@]}" ; do
	if ! test -z "$subpackage" ; then
	    echo ""
	    echo "%package $subpackage"
	fi
	for subsection in basic source patch ext temp ; do
	    eval "for string in \"\${rpm_preamble__${subsection}_$subpackage[@]}\" ; do
		echo \"\$string\"
	    done"
	done
	echo ""
	echo "%description${subpackage:+ $subpackage}"
	eval echo \"\$rpm_description__$subpackage\"
    done
}

# rpm_write_spec_body
# Writes spec body to stdout.
function rpm_write_spec_body {
    pwiz_phase_save
    pwiz_phase_reset
    while pwiz_step query ; do
	case "$pwiz_result" in
	    "pwiz_run "* )
		echo "${pwiz_result#pwiz_run }"
		;;
	    "pwiz_rem "* )
		echo "${pwiz_result#pwiz_rem }"
		;;
# FIXME: will be removed
	    "pwiz_run_eval "* | "pwiz_rem_eval "* )
		eval echo \"\${PWIZ_STAGE_EVAL_$PWIZ_PHASE_CURRENT\[$PWIZ_STAGE_CURRENT\]}\"
	    ;;
	esac
    done
    pwiz_phase_restore
}

# rpm_write_spec
# Writes complete spec to $PWIZ_RESULTDIR.
function rpm_write_spec {
    rm -f $PWIZ_RESULTDIR/$pwiz_project_project.spec
    pwiz_redirect_stdout $PWIZ_RESULTDIR/$pwiz_project_project.spec
    echo "# *** This file is generated by PWIZ. Do not edit by hand. ***"
    rpm_write_spec_preamble
    rpm_write_spec_body
    pwiz_redirect_stdout_close
}

# rpm_write_sources
# Copies sources to resultdir.
function rpm_write_sources {
    cp -a $PWIZ_SOURCESDIR/* $PWIZ_RESULTDIR
}

# rpm_spec_compile
# Compile RPM package from spec file.
# FIXME: don't hardwire paths
function rpm_spec_compile {
    local subpackage
    cd $PWIZ_RESULTDIR
    rpmbuild -ba $pwiz_project_project.spec
    cp -a /usr/src/packages/RPMS/*/$pwiz_project_project-[0-9]* .
    cp -a /usr/src/packages/SRPMS/$pwiz_project_project-[0-9]* .
    for subpackage in $(<$PWIZ_TMPDIR/rpm_sub) ; do
	cp -a /usr/src/packages/RPMS/*/$pwiz_project_project-$subpackage-[0-9]* .
    done
}


# FIXME: rpm should auto-ask for splitted package args, if none are supported.

# FIXME: Stuff should work, if package name != project name
